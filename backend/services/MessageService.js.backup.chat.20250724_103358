const BaseService = require('./BaseService');

class MessageService extends BaseService {
    constructor() {
        super('messages');
    }

    // 获取用户的所有对话 - 修复查询逻辑
    async getUserConversations(userId) {
        try {
            const safeUserId = parseInt(userId);
            console.log('Getting conversations for user:', safeUserId);
            
            const query = `
                SELECT 
                    c.id,
                    c.last_message_at,
                    c.created_at,
                    u.id as other_user_id,
                    u.username as other_user_username,
                    u.avatar as other_user_avatar,
                    u.bio as other_user_bio,
                    m.content as last_message,
                    m.message_type as last_message_type,
                    COUNT(unread_m.id) as unread_count
                FROM conversations c
                JOIN users u ON (
                    CASE 
                        WHEN c.user1_id = ? THEN u.id = c.user2_id
                        ELSE u.id = c.user1_id
                    END
                )
                LEFT JOIN messages m ON m.conversation_id = c.id 
                    AND m.id = (
                        SELECT m2.id 
                        FROM messages m2 
                        WHERE m2.conversation_id = c.id 
                        ORDER BY m2.created_at DESC 
                        LIMIT 1
                    )
                LEFT JOIN messages unread_m ON unread_m.conversation_id = c.id 
                    AND unread_m.receiver_id = ? 
                    AND unread_m.is_read = FALSE
                WHERE c.user1_id = ? OR c.user2_id = ?
                GROUP BY c.id, c.last_message_at, c.created_at, u.id, u.username, u.avatar, u.bio, m.content, m.message_type
                ORDER BY c.last_message_at DESC
            `;
            
            console.log('Executing conversations query for user:', safeUserId);
            const [rows] = await this.db.execute(query, [safeUserId, safeUserId, safeUserId, safeUserId]);
            
            const conversations = rows.map(row => ({
                id: row.id,
                last_message_at: row.last_message_at,
                created_at: row.created_at,
                last_message: row.last_message,
                last_message_type: row.last_message_type,
                unread_count: row.unread_count,
                other_user: {
                    id: row.other_user_id,
                    username: row.other_user_username,
                    avatar: row.other_user_avatar,
                    bio: row.other_user_bio
                }
            }));
            
            console.log('Found conversations:', conversations.length);
            console.log('Conversations details:', conversations.map(c => ({
                id: c.id,
                other_user: c.other_user.username,
                last_message: c.last_message ? c.last_message.substring(0, 20) + '...' : 'No messages',
                unread_count: c.unread_count
            })));
            
            return conversations;
        } catch (error) {
            console.error('Error in getUserConversations:', error);
            throw error;
        }
    }

    // 获取对话中的消息 - 包含帖子分享
    async getConversationMessages(conversationId, offset = 0, limit = 50) {
        try {
            const safeConversationId = parseInt(conversationId);
            const safeOffset = parseInt(offset);
            const safeLimit = parseInt(limit);
            
            console.log('Getting messages for conversation:', { safeConversationId, safeOffset, safeLimit });
            
            const query = `
                SELECT 
                    m.id,
                    m.conversation_id,
                    m.sender_id,
                    m.receiver_id,
                    m.content,
                    m.message_type,
                    m.referenced_post_id,
                    m.is_read,
                    m.created_at,
                    u.username as sender_username,
                    u.avatar as sender_avatar,
                    p.id as post_id,
                    p.title as post_title,
                    p.description as post_description,
                    p.content_text as post_content,
                    p.likes_count as post_likes,
                    p.comments_count as post_comments,
                    p.reposts_count as post_reposts,
                    p.created_at as post_created_at,
                    pu.username as post_author_username,
                    pu.avatar as post_author_avatar
                FROM messages m
                JOIN users u ON m.sender_id = u.id
                LEFT JOIN posts p ON m.referenced_post_id = p.id
                LEFT JOIN users pu ON p.user_id = pu.id
                WHERE m.conversation_id = ?
                ORDER BY m.created_at ASC
                LIMIT ${safeLimit} OFFSET ${safeOffset}
            `;
            
            console.log('Executing messages query for conversation:', safeConversationId);
            const [messages] = await this.db.execute(query, [safeConversationId]);
            
            // 处理消息数据，分离帖子信息
            const processedMessages = messages.map(msg => {
                const message = {
                    id: msg.id,
                    conversation_id: msg.conversation_id,
                    sender_id: msg.sender_id,
                    receiver_id: msg.receiver_id,
                    content: msg.content,
                    message_type: msg.message_type,
                    referenced_post_id: msg.referenced_post_id,
                    is_read: msg.is_read,
                    created_at: msg.created_at,
                    sender_username: msg.sender_username,
                    sender_avatar: msg.sender_avatar
                };

                // 如果是帖子分享，添加帖子信息
                if (msg.message_type === 'post_share' && msg.post_id) {
                    message.shared_post = {
                        id: msg.post_id,
                        title: msg.post_title,
                        description: msg.post_description,
                        content_text: msg.post_content,
                        likes_count: msg.post_likes,
                        comments_count: msg.post_comments,
                        reposts_count: msg.post_reposts,
                        created_at: msg.post_created_at,
                        author: {
                            username: msg.post_author_username,
                            avatar: msg.post_author_avatar
                        }
                    };
                }

                return message;
            });
            
            const countQuery = 'SELECT COUNT(*) as total FROM messages WHERE conversation_id = ?';
            const [countResult] = await this.db.execute(countQuery, [safeConversationId]);
            
            console.log('Found messages:', processedMessages.length, 'Total:', countResult[0].total);
            
            return {
                data: processedMessages,
                total: countResult[0].total
            };
        } catch (error) {
            console.error('Error in getConversationMessages:', error);
            throw error;
        }
    }

    // 发送普通消息
    async sendMessage({ conversationId, senderId, receiverId, content, messageType = 'text' }) {
        try {
            const safeConversationId = parseInt(conversationId);
            const safeSenderId = parseInt(senderId);
            const safeReceiverId = parseInt(receiverId);
            
            console.log('Sending message:', { safeConversationId, safeSenderId, safeReceiverId, content, messageType });
            
            // 验证对话存在
            const [conversation] = await this.db.execute(
                'SELECT * FROM conversations WHERE id = ?',
                [safeConversationId]
            );
            
            if (conversation.length === 0) {
                throw new Error('Conversation not found');
            }

            // 确定接收者ID
            const conv = conversation[0];
            const actualReceiverId = safeReceiverId || (conv.user1_id === safeSenderId ? conv.user2_id : conv.user1_id);

            console.log('Actual receiver ID:', actualReceiverId);

            // 创建消息
            const message = await this.create({
                conversation_id: safeConversationId,
                sender_id: safeSenderId,
                receiver_id: actualReceiverId,
                content,
                message_type: messageType,
                is_read: false
            });

            console.log('Message created:', message.id);

            // 更新对话的最后消息时间
            await this.db.execute(
                'UPDATE conversations SET last_message_at = NOW() WHERE id = ?',
                [safeConversationId]
            );

            console.log('Updated conversation last_message_at');

            return message;
        } catch (error) {
            console.error('Error in sendMessage:', error);
            throw new Error(`Failed to send message: ${error.message}`);
        }
    }

    // 分享帖子到对话
    async sharePostToConversation({ conversationId, senderId, receiverId, postId, comment = null }) {
        try {
            const safeConversationId = parseInt(conversationId);
            const safeSenderId = parseInt(senderId);
            const safeReceiverId = parseInt(receiverId);
            const safePostId = parseInt(postId);
            
            console.log('Sharing post to conversation:', { 
                safeConversationId, 
                safeSenderId, 
                safeReceiverId, 
                safePostId, 
                comment 
            });
            
            // 验证帖子存在且未被删除
            const [post] = await this.db.execute(
                'SELECT id, title FROM posts WHERE id = ?',
                [safePostId]
            );
            
            if (post.length === 0) {
                throw new Error('Post not found or has been deleted');
            }

            // 验证对话存在
            const [conversation] = await this.db.execute(
                'SELECT * FROM conversations WHERE id = ?',
                [safeConversationId]
            );
            
            if (conversation.length === 0) {
                throw new Error('Conversation not found');
            }

            // 确定接收者ID
            const conv = conversation[0];
            const actualReceiverId = safeReceiverId || (conv.user1_id === safeSenderId ? conv.user2_id : conv.user1_id);

            // 创建帖子分享消息
            const content = comment ? comment.trim() : `Shared a post: ${post[0].title}`;
            
            const message = await this.create({
                conversation_id: safeConversationId,
                sender_id: safeSenderId,
                receiver_id: actualReceiverId,
                content: content,
                message_type: 'post_share',
                referenced_post_id: safePostId,
                is_read: false
            });

            console.log('Post share message created:', message.id);

            // 更新对话的最后消息时间
            await this.db.execute(
                'UPDATE conversations SET last_message_at = NOW() WHERE id = ?',
                [safeConversationId]
            );

            // 获取完整的消息信息（包含帖子详情）
            const [fullMessage] = await this.db.execute(
                `SELECT 
                    m.*,
                    u.username as sender_username,
                    u.avatar as sender_avatar,
                    p.title as post_title,
                    p.description as post_description,
                    p.content_text as post_content,
                    p.likes_count as post_likes,
                    p.comments_count as post_comments,
                    p.reposts_count as post_reposts,
                    p.created_at as post_created_at,
                    pu.username as post_author_username,
                    pu.avatar as post_author_avatar
                FROM messages m
                JOIN users u ON m.sender_id = u.id
                JOIN posts p ON m.referenced_post_id = p.id
                JOIN users pu ON p.user_id = pu.id
                WHERE m.id = ?`,
                [message.id]
            );

            const result = fullMessage[0];
            result.shared_post = {
                id: safePostId,
                title: result.post_title,
                description: result.post_description,
                content_text: result.post_content,
                likes_count: result.post_likes,
                comments_count: result.post_comments,
                reposts_count: result.post_reposts,
                created_at: result.post_created_at,
                author: {
                    username: result.post_author_username,
                    avatar: result.post_author_avatar
                }
            };

            console.log('Post shared successfully to conversation');
            return result;
        } catch (error) {
            console.error('Error in sharePostToConversation:', error);
            throw new Error(`Failed to share post: ${error.message}`);
        }
    }

    // 创建或获取对话
    async createOrGetConversation(user1Id, user2Id) {
        try {
            const safeUser1Id = parseInt(user1Id);
            const safeUser2Id = parseInt(user2Id);
            
            console.log('Creating/getting conversation between:', safeUser1Id, 'and', safeUser2Id);
            
            // 确保user1Id < user2Id 以避免重复
            const [smallerId, largerId] = safeUser1Id < safeUser2Id ? [safeUser1Id, safeUser2Id] : [safeUser2Id, safeUser1Id];

            // 查找现有对话
            const [existing] = await this.db.execute(
                `SELECT * FROM conversations 
                 WHERE (user1_id = ? AND user2_id = ?) 
                 OR (user1_id = ? AND user2_id = ?)`,
                [smallerId, largerId, largerId, smallerId]
            );

            if (existing.length > 0) {
                console.log('Found existing conversation:', existing[0].id);
                return existing[0];
            }

            // 创建新对话
            const [result] = await this.db.execute(
                'INSERT INTO conversations (user1_id, user2_id) VALUES (?, ?)',
                [smallerId, largerId]
            );

            const [newConversation] = await this.db.execute(
                'SELECT * FROM conversations WHERE id = ?',
                [result.insertId]
            );

            console.log('Created new conversation:', newConversation[0].id);
            return newConversation[0];
        } catch (error) {
            console.error('Error in createOrGetConversation:', error);
            throw error;
        }
    }

    // 检查用户是否有访问对话的权限
    async hasConversationAccess(conversationId, userId) {
        try {
            const safeConversationId = parseInt(conversationId);
            const safeUserId = parseInt(userId);
            
            const [conversation] = await this.db.execute(
                'SELECT * FROM conversations WHERE id = ? AND (user1_id = ? OR user2_id = ?)',
                [safeConversationId, safeUserId, safeUserId]
            );

            const hasAccess = conversation.length > 0;
            console.log('Access check for conversation:', safeConversationId, 'user:', safeUserId, 'result:', hasAccess);
            return hasAccess;
        } catch (error) {
            console.error('Error in hasConversationAccess:', error);
            throw error;
        }
    }

    // 标记单条消息为已读
    async markMessageAsRead(messageId, userId) {
        try {
            const safeMessageId = parseInt(messageId);
            const safeUserId = parseInt(userId);
            
            const [result] = await this.db.execute(
                'UPDATE messages SET is_read = TRUE WHERE id = ? AND receiver_id = ?',
                [safeMessageId, safeUserId]
            );

            return result.affectedRows > 0;
        } catch (error) {
            console.error('Error in markMessageAsRead:', error);
            throw error;
        }
    }

    // 标记对话中的所有消息为已读
    async markConversationAsRead(conversationId, userId) {
        try {
            const safeConversationId = parseInt(conversationId);
            const safeUserId = parseInt(userId);
            
            const [result] = await this.db.execute(
                'UPDATE messages SET is_read = TRUE WHERE conversation_id = ? AND receiver_id = ?',
                [safeConversationId, safeUserId]
            );

            console.log('Marked', result.affectedRows, 'messages as read');
            return result.affectedRows;
        } catch (error) {
            console.error('Error in markConversationAsRead:', error);
            throw error;
        }
    }

    // 获取未读消息总数
    async getUnreadCount(userId) {
        try {
            const safeUserId = parseInt(userId);
            
            const [result] = await this.db.execute(
                'SELECT COUNT(*) as count FROM messages WHERE receiver_id = ? AND is_read = FALSE',
                [safeUserId]
            );

            return result[0].count;
        } catch (error) {
            console.error('Error in getUnreadCount:', error);
            throw error;
        }
    }
}

module.exports = MessageService;
