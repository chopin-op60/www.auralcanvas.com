const BaseController = require('./BaseController');
const PostService = require('../services/PostService');
const CommentService = require('../services/CommentService');
const LikeService = require('../services/LikeService');
const RepostService = require('../services/RepostService');

class PostController extends BaseController {
    constructor() {
        super();
        this.postService = new PostService();
        this.commentService = new CommentService();
        this.likeService = new LikeService();
        this.repostService = new RepostService();
    }

    // Create mixed-content post
    createPost = this.handleAsync(async (req, res) => {
        console.log('Creating mixed-content post');
        console.log('Request body:', req.body);
        console.log('Uploaded files:', req.files ? req.files.length : 0);

        const { title, description, content_text } = req.body;

        if (!title || !title.trim()) {
            return this.sendError(res, 'Post title is required', 400);
        }

        try {
            // 准备帖子数据
            const postData = {
                user_id: req.user.id,
                title: title.trim(),
                description: description ? description.trim() : null,
                content_text: content_text ? content_text.trim() : null
            };

            console.log('Post data to save:', postData);
            console.log('Files to process:', req.files ? req.files.map(f => ({ name: f.originalname, size: f.size, type: f.mimetype })) : []);

            // 创建帖子（包括媒体文件处理）
            const post = await this.postService.createPost(postData, req.files);
            
            console.log('Mixed-content post created successfully:', post.id);
            this.sendSuccess(res, post, 'Post created successfully', 201);
        } catch (error) {
            console.error('Error creating mixed-content post:', error);
            this.sendError(res, error.message, 400);
        }
    });

    // Get post list with like status and repost status for authenticated users
    getPosts = this.handleAsync(async (req, res) => {
        const { page, limit, offset } = this.getPagination(req);
        const userId = req.query.user_id;

        try {
            const result = await this.postService.getPostsWithUserInfo(offset, limit, userId);
            
            // If user is authenticated, get their interaction status
            if (req.user && req.user.id) {
                const postIds = result.data.map(post => post.id);
                const [likeStatuses, repostStatuses] = await Promise.all([
                    this.likeService.getUserLikeStatusBatch(postIds, req.user.id),
                    this.repostService.getUserRepostStatusBatch(postIds, req.user.id)
                ]);
                
                // Add interaction status to each post
                result.data.forEach(post => {
                    post.user_liked = likeStatuses[post.id] || false;
                    post.user_reposted = repostStatuses[post.id] || false;
                });
            }
            
            const response = {
                posts: result.data,
                pagination: {
                    page,
                    limit,
                    total: result.total,
                    totalPages: Math.ceil(result.total / limit)
                }
            };

            this.sendSuccess(res, response, 'Post list retrieved successfully');
        } catch (error) {
            this.sendError(res, 'Failed to retrieve post list', 500, error.message);
        }
    });

    // Get single post details
    getPost = this.handleAsync(async (req, res) => {
        const { id } = req.params;

        try {
            const post = await this.postService.getPostById(id);
            if (!post) {
                return this.sendError(res, 'Post not found', 404);
            }

            // Add interaction status if user is authenticated
            if (req.user && req.user.id) {
                const [liked, reposted] = await Promise.all([
                    this.likeService.getUserLikeStatus(id, req.user.id),
                    this.repostService.getUserRepostStatus(req.user.id, id)
                ]);
                
                post.user_liked = liked;
                post.user_reposted = reposted;
            }

            this.sendSuccess(res, post, 'Post details retrieved successfully');
        } catch (error) {
            this.sendError(res, 'Failed to retrieve post details', 500, error.message);
        }
    });

    // Update post (text content only)
    updatePost = this.handleAsync(async (req, res) => {
        const { id } = req.params;
        const { title, description, content_text } = req.body;

        try {
            const updatedPost = await this.postService.updatePost(id, req.user.id, {
                title: title || null,
                description: description || null,
                content_text: content_text || null
            });

            this.sendSuccess(res, updatedPost, 'Post updated successfully');
        } catch (error) {
            this.sendError(res, error.message, 400);
        }
    });

    // Delete post (includes media cleanup)
    deletePost = this.handleAsync(async (req, res) => {
        const { id } = req.params;

        try {
            await this.postService.deletePost(id, req.user.id);
            this.sendSuccess(res, null, 'Post deleted successfully');
        } catch (error) {
            this.sendError(res, error.message, 400);
        }
    });

    // 点赞/取消点赞
    toggleLike = this.handleAsync(async (req, res) => {
        const { id } = req.params;

        try {
            const result = await this.likeService.toggleLike(id, req.user.id);
            this.sendSuccess(res, result, result.liked ? 'Post liked successfully' : 'Post unliked successfully');
        } catch (error) {
            console.error('Toggle like error:', error);
            this.sendError(res, 'Operation failed', 500, error.message);
        }
    });

    // 转发/取消转发
    toggleRepost = this.handleAsync(async (req, res) => {
        const { id } = req.params;
        const { comment } = req.body;

        try {
            // 检查是否已经转发
            const alreadyReposted = await this.repostService.getUserRepostStatus(req.user.id, id);
            
            let result;
            if (alreadyReposted) {
                // 取消转发
                await this.repostService.deleteRepost(req.user.id, id);
                result = { reposted: false };
            } else {
                // 创建转发
                await this.repostService.createRepost(req.user.id, id, comment);
                result = { reposted: true };
            }

            // 获取最新转发计数
            const [countResult] = await this.repostService.db.execute(
                'SELECT reposts_count FROM posts WHERE id = ?',
                [id]
            );
            
            result.reposts_count = countResult[0].reposts_count;

            this.sendSuccess(res, result, result.reposted ? 'Post reposted successfully' : 'Repost removed successfully');
        } catch (error) {
            console.error('Toggle repost error:', error);
            this.sendError(res, error.message, 400);
        }
    });

    // 获取帖子点赞列表
    getPostLikes = this.handleAsync(async (req, res) => {
        const { id } = req.params;
        const { page, limit, offset } = this.getPagination(req);

        try {
            const result = await this.likeService.getPostLikes(id, offset, limit);
            
            const response = {
                likes: result.data,
                pagination: {
                    page,
                    limit,
                    total: result.total,
                    totalPages: Math.ceil(result.total / limit)
                }
            };

            this.sendSuccess(res, response, 'Post likes retrieved successfully');
        } catch (error) {
            this.sendError(res, 'Failed to retrieve post likes', 500, error.message);
        }
    });

    // 获取帖子转发列表
    getPostReposts = this.handleAsync(async (req, res) => {
        const { id } = req.params;
        const { page, limit, offset } = this.getPagination(req);

        try {
            const result = await this.repostService.getPostReposts(id, offset, limit);
            
            const response = {
                reposts: result.data,
                pagination: {
                    page,
                    limit,
                    total: result.total,
                    totalPages: Math.ceil(result.total / limit)
                }
            };

            this.sendSuccess(res, response, 'Post reposts retrieved successfully');
        } catch (error) {
            this.sendError(res, 'Failed to retrieve post reposts', 500, error.message);
        }
    });

    // Comment methods
    getComments = this.handleAsync(async (req, res) => {
        const { id } = req.params;
        const { page, limit, offset } = this.getPagination(req);

        try {
            const result = await this.commentService.getCommentsByPostId(id, offset, limit);
            
            const response = {
                comments: result.data,
                pagination: {
                    page,
                    limit,
                    total: result.total,
                    totalPages: Math.ceil(result.total / limit)
                }
            };

            this.sendSuccess(res, response, 'Comment list retrieved successfully');
        } catch (error) {
            this.sendError(res, 'Failed to retrieve comment list', 500, error.message);
        }
    });

    addComment = this.handleAsync(async (req, res) => {
        const { id } = req.params;
        const { content } = req.body;

        if (!content || content.trim().length === 0) {
            return this.sendError(res, 'Comment content cannot be empty', 400);
        }

        if (content.trim().length > 500) {
            return this.sendError(res, 'Comment is too long (max 500 characters)', 400);
        }

        try {
            const comment = await this.commentService.createComment({
                post_id: parseInt(id),
                user_id: req.user.id,
                content: content.trim()
            });

            // 获取完整的评论信息（包含用户信息）
            const [fullComment] = await this.commentService.db.execute(
                `SELECT 
                    c.*,
                    u.username,
                    u.avatar as user_avatar
                FROM comments c 
                JOIN users u ON c.user_id = u.id 
                WHERE c.id = ?`,
                [comment.id]
            );

            this.sendSuccess(res, fullComment[0], 'Comment added successfully', 201);
        } catch (error) {
            console.error('Add comment error:', error);
            this.sendError(res, 'Failed to add comment', 500, error.message);
        }
    });

    deleteComment = this.handleAsync(async (req, res) => {
        const { commentId } = req.params;

        try {
            await this.commentService.deleteComment(commentId, req.user.id);
            this.sendSuccess(res, null, 'Comment deleted successfully');
        } catch (error) {
            console.error('Delete comment error:', error);
            this.sendError(res, error.message, 400);
        }
    });
}

module.exports = new PostController();
