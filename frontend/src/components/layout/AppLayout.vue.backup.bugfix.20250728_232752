<template>
  <div class="app-layout">
    <!-- 🔧 隐藏整个顶部导航栏 - 功能都在侧边栏了 -->
    
    <!-- Sidebar -->
    <AppSidebar v-if="userStore.isLoggedIn" />
    
    <!-- Main content area - 根据侧边栏状态调整 -->
    <main class="app-main" :class="{ 'with-sidebar': userStore.isLoggedIn && appStore.sidebar.opened }">
      <div class="main-content">
        <router-view />
      </div>
    </main>
    
    <!-- Footer -->
    <footer class="app-footer" :class="{ 'with-sidebar': userStore.isLoggedIn && appStore.sidebar.opened }">
      <div class="footer-content">
        <p>&copy; 2024 AuralCanvas. All rights reserved.</p>
      </div>
    </footer>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage, ElMessageBox } from 'element-plus'
import { useUserStore } from '@/stores/user'
import { useAppStore } from '@/stores/app'
import { getFileUrl } from '@/utils'
import { getUnreadCount } from '@/api/messages'
import { getFriendRequests } from '@/api/friends'
import AppSidebar from '@/components/sidebar/AppSidebar.vue'
import { 
  Menu, Search, Plus, ChatDotRound, User, UserFilled, 
  Edit, SwitchButton 
} from '@element-plus/icons-vue'

const router = useRouter()
const userStore = useUserStore()
const appStore = useAppStore()
const searchKeyword = ref('')
const unreadCount = ref(0)
const friendRequestCount = ref(0)

// 点击头像跳转到个人主页
const goToMyProfile = () => {
  router.push('/profile')
}

// Search handling - 保留逻辑，以备后用
const handleSearch = () => {
  if (!searchKeyword.value.trim()) {
    ElMessage.warning('Please enter a search keyword')
    return
  }
  
  // Navigate to home with search query
  router.push({
    path: '/home',
    query: { 
      tab: 'search',
      q: searchKeyword.value.trim()
    }
  })
}

// Create post
const handleCreatePost = () => {
  router.push('/post/create')
}

// Sign out
const handleLogout = async () => {
  try {
    await ElMessageBox.confirm('Are you sure you want to sign out?', 'Confirm', {
      confirmButtonText: 'Sign Out',
      cancelButtonText: 'Cancel',
      type: 'warning'
    })
    
    userStore.logout()
    ElMessage.success('Signed out successfully')
    router.push('/home')
  } catch {
    // User cancelled
  }
}

// Load notification counts
const loadNotifications = async () => {
  if (!userStore.isLoggedIn) return
  
  try {
    const [unreadResponse, friendsResponse] = await Promise.all([
      getUnreadCount(),
      getFriendRequests({ status: 'pending' })
    ])
    
    unreadCount.value = unreadResponse.data.count || 0
    friendRequestCount.value = friendsResponse.data.requests?.length || 0
  } catch (error) {
    console.error('Failed to load notifications:', error)
  }
}

onMounted(() => {
  loadNotifications()
  
  // 设置定时器定期更新通知
  setInterval(loadNotifications, 30000) // 30秒更新一次
})
</script>

<style lang="scss" scoped>
.app-layout {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  // 🔧 移除顶部栏后调整布局
}

// 主内容区域 - 调整top值，移除顶部栏高度
.app-main {
  flex: 1;
  background: #f5f7fa;
  transition: margin-left 0.3s ease;
  // 🔧 移除顶部栏后，不需要预留顶部空间
  padding-top: 0;
  
  &.with-sidebar {
    margin-left: 240px;
  }
  
  .main-content {
    width: 100%;
    padding: 0; // 移除内边距，让首页自己控制
    margin: 0;
  }
}

.app-footer {
  background: #fff;
  border-top: 1px solid #e4e7ed;
  transition: margin-left 0.3s ease;
  
  &.with-sidebar {
    margin-left: 240px;
  }
  
  .footer-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
    text-align: center;
    color: #909399;
    font-size: 14px;
  }
}

@media (max-width: 768px) {
  .app-main,
  .app-footer {
    &.with-sidebar {
      margin-left: 0;
    }
  }
  
  .app-main .main-content {
    padding: 0;
  }
}
</style>
