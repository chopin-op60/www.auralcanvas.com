<template>
  <div 
    ref="avatarContainer"
    class="avatar-with-ai"
    @mouseenter="handleMouseEnter"
    @mouseleave="handleMouseLeave"
  >
    <!-- Â§¥ÂÉè -->
    <el-avatar 
      :src="getFileUrl(avatarUrl)" 
      :size="size"
      class="clickable-avatar"
      @click="goToUserProfile(userId)"
    >
      <el-icon><User /></el-icon>
    </el-avatar>
  </div>
  
  <!-- üîß ÂÖ≥ÈîÆ‰øÆÂ§çÔºöAIÊåâÈíÆPortalÂà∞bodyÔºåÈÅøÂÖçÁà∂ÂÆπÂô®ÈÅÆÊå° -->
  <teleport to="body">
    <transition name="ai-button-fade">
      <div 
        v-if="showAIButton && hasActiveAgent && buttonPosition"
        class="ai-chat-button-portal"
        :style="buttonPosition"
        @click.stop="openAIChat"
        @mouseenter="handleButtonMouseEnter"
        @mouseleave="handleButtonMouseLeave"
        v-loading="aiLoading"
      >
        <el-icon><ChatDotSquare /></el-icon>
        <span>AI</span>
      </div>
    </transition>
  </teleport>
  
  <!-- AIËÅäÂ§©ÂØπËØùÊ°Ü -->
  <el-dialog
    v-model="chatDialogVisible"
    :title="agentInfo?.agent_name || `${username}'s AI Assistant`"
    width="90%"
    class="ai-chat-dialog"
    @close="cleanupChat"
  >
    <div class="chat-container">
      <div v-if="chatUrl" class="chat-iframe-container">
        <iframe
          :src="chatUrl"
          class="chat-iframe"
          frameborder="0"
          allow="microphone"
        ></iframe>
      </div>
      <div v-else class="loading-chat">
        <el-icon class="loading-icon"><Loading /></el-icon>
        <span>Loading AI chat...</span>
      </div>
    </div>
  </el-dialog>
</template>

<script setup>
import { ref, computed, onUnmounted, nextTick } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { User, ChatDotSquare, Loading } from '@element-plus/icons-vue'
import { getFileUrl } from '@/utils'
import { useUserStore } from '@/stores/user'
import { checkUserAIAgent } from '@/api/users'
import { getUserAgent } from '@/api/ai'

const props = defineProps({
  userId: {
    type: [String, Number],
    required: true
  },
  avatarUrl: {
    type: String,
    default: ''
  },
  username: {
    type: String,
    default: ''
  },
  size: {
    type: Number,
    default: 40
  }
})

const router = useRouter()
const userStore = useUserStore()
const avatarContainer = ref(null)

// Áä∂ÊÄÅÁÆ°ÁêÜ
const showAIButton = ref(false)
const hasActiveAgent = ref(false)
const agentInfo = ref(null)
const chatDialogVisible = ref(false)
const chatUrl = ref('')
const aiLoading = ref(false)
const checkTimer = ref(null)
const hideTimer = ref(null)
const buttonPosition = ref(null)
const updateTimer = ref(null)

// ËÆ°ÁÆóÂ±ûÊÄß
const isCurrentUser = computed(() => 
  parseInt(props.userId) === parseInt(userStore.userId)
)

// üîß ÂÖ≥ÈîÆÂäüËÉΩÔºöÁ≤æÁ°ÆËÆ°ÁÆóAIÊåâÈíÆ‰ΩçÁΩÆ
const calculateButtonPosition = () => {
  if (!avatarContainer.value) return null
  
  const avatarElement = avatarContainer.value.querySelector('.clickable-avatar')
  if (!avatarElement) return null
  
  const rect = avatarElement.getBoundingClientRect()
  
  // Ê£ÄÊü•ÂÖÉÁ¥†ÊòØÂê¶Âú®ËßÜÂè£ÂÜÖ
  if (rect.width === 0 || rect.height === 0) return null
  
  const buttonWidth = 70 // AIÊåâÈíÆÈ¢Ñ‰º∞ÂÆΩÂ∫¶
  const buttonHeight = 40 // AIÊåâÈíÆÈ¢Ñ‰º∞È´òÂ∫¶
  const gap = 12 // ‰∏éÂ§¥ÂÉèÁöÑÈó¥Ë∑ù
  
  return {
    position: 'fixed',
    top: `${Math.max(10, rect.top - buttonHeight - gap)}px`,
    left: `${rect.left + rect.width / 2 - buttonWidth / 2}px`,
    zIndex: '99999',
    pointerEvents: 'auto'
  }
}

// üîß Êõ¥Êñ∞ÊåâÈíÆ‰ΩçÁΩÆÔºàÊªöÂä®Êó∂Ôºâ
const updateButtonPosition = () => {
  if (showAIButton.value && hasActiveAgent.value) {
    buttonPosition.value = calculateButtonPosition()
    
    // Â¶ÇÊûúËÆ°ÁÆóÂ§±Ë¥•ÔºåÈöêËóèÊåâÈíÆ
    if (!buttonPosition.value) {
      showAIButton.value = false
    }
  }
}

// Èº†Ê†áËøõÂÖ•Â§¥ÂÉèÂå∫Âüü
const handleMouseEnter = async () => {
  if (checkTimer.value) {
    clearTimeout(checkTimer.value)
    checkTimer.value = null
  }
  if (hideTimer.value) {
    clearTimeout(hideTimer.value)
    hideTimer.value = null
  }
  
  if (isCurrentUser.value) {
    return
  }
  
  checkTimer.value = setTimeout(async () => {
    await checkAIAvailability()
    if (hasActiveAgent.value) {
      await nextTick()
      buttonPosition.value = calculateButtonPosition()
      
      if (buttonPosition.value) {
        showAIButton.value = true
        
        // üîß ÁõëÂê¨ÊªöÂä®‰∫ã‰ª∂ÔºåÂÆûÊó∂Êõ¥Êñ∞‰ΩçÁΩÆ
        window.addEventListener('scroll', updateButtonPosition, { passive: true })
        window.addEventListener('resize', updateButtonPosition, { passive: true })
        
        // üîß ÂÆöÊó∂Êõ¥Êñ∞‰ΩçÁΩÆÔºàÂ∫îÂØπÂä®ÊÄÅÂÜÖÂÆπÔºâ
        updateTimer.value = setInterval(updateButtonPosition, 200)
      }
    }
  }, 200)
}

// Èº†Ê†áÁ¶ªÂºÄÂ§¥ÂÉèÂå∫Âüü
const handleMouseLeave = () => {
  if (checkTimer.value) {
    clearTimeout(checkTimer.value)
    checkTimer.value = null
  }
  
  hideTimer.value = setTimeout(() => {
    cleanupButton()
  }, 300)
}

// Èº†Ê†áËøõÂÖ•AIÊåâÈíÆ
const handleButtonMouseEnter = () => {
  if (hideTimer.value) {
    clearTimeout(hideTimer.value)
    hideTimer.value = null
  }
  
  // üîß ËøõÂÖ•ÊåâÈíÆÊó∂Êõ¥Êñ∞‰ΩçÁΩÆ
  updateButtonPosition()
}

// Èº†Ê†áÁ¶ªÂºÄAIÊåâÈíÆ
const handleButtonMouseLeave = () => {
  hideTimer.value = setTimeout(() => {
    cleanupButton()
  }, 150)
}

// üîß Ê∏ÖÁêÜÊåâÈíÆÂíå‰∫ã‰ª∂ÁõëÂê¨Âô®
const cleanupButton = () => {
  showAIButton.value = false
  buttonPosition.value = null
  
  // Ê∏ÖÁêÜ‰∫ã‰ª∂ÁõëÂê¨Âô®
  window.removeEventListener('scroll', updateButtonPosition)
  window.removeEventListener('resize', updateButtonPosition)
  
  if (updateTimer.value) {
    clearInterval(updateTimer.value)
    updateTimer.value = null
  }
}

// Ê£ÄÊü•AIÂèØÁî®ÊÄß
const checkAIAvailability = async () => {
  if (!userStore.isLoggedIn || aiLoading.value) {
    return
  }
  
  try {
    aiLoading.value = true
    const response = await checkUserAIAgent(props.userId)
    
    if (response.success && response.data.hasActiveAgent) {
      hasActiveAgent.value = true
      agentInfo.value = response.data.agentInfo
    } else {
      hasActiveAgent.value = false
      agentInfo.value = null
    }
  } catch (error) {
    console.log('AI availability check failed:', error.message)
    hasActiveAgent.value = false
    agentInfo.value = null
  } finally {
    aiLoading.value = false
  }
}

// ÁÇπÂáªÂ§¥ÂÉèË∑≥ËΩ¨
const goToUserProfile = (userId) => {
  if (userId) {
    router.push(`/user/${userId}`)
  }
}

// ÊâìÂºÄAIÂØπËØù
const openAIChat = async () => {
  if (!userStore.isLoggedIn) {
    ElMessage.warning('Please login to chat with AI')
    return
  }
  
  // üîß ÁÇπÂáªÂêéÁ´ãÂç≥ÈöêËóèÊåâÈíÆ
  cleanupButton()
  
  try {
    const response = await getUserAgent(props.userId)
    const agentData = response.data
    
    if (!agentData.external_script_code) {
      ElMessage.error('AI chat is not available')
      return
    }
    
    chatUrl.value = createChatUrl(agentData.external_script_code)
    chatDialogVisible.value = true
    
  } catch (error) {
    console.error('Failed to open AI chat:', error)
    ElMessage.error('Cannot access AI chat')
  }
}

// ÂàõÂª∫ËÅäÂ§©URL
const createChatUrl = (scriptCode) => {
  if (scriptCode.includes('<iframe')) {
    const srcMatch = scriptCode.match(/src="([^"]*)"/)
    if (srcMatch) {
      return srcMatch[1]
    }
  } else if (scriptCode.startsWith('http')) {
    return scriptCode
  }
  
  return ''
}

// Ê∏ÖÁêÜËÅäÂ§©
const cleanupChat = () => {
  chatUrl.value = ''
}

// ÁªÑ‰ª∂Âç∏ËΩΩÊó∂Ê∏ÖÁêÜ
onUnmounted(() => {
  if (checkTimer.value) {
    clearTimeout(checkTimer.value)
  }
  if (hideTimer.value) {
    clearTimeout(hideTimer.value)
  }
  cleanupButton()
})
</script>

<style lang="scss" scoped>
.avatar-with-ai {
  position: relative;
  display: inline-block;
  
  .clickable-avatar {
    cursor: pointer;
    transition: transform 0.2s ease;
    
    &:hover {
      transform: scale(1.05);
    }
  }
}

.ai-chat-dialog {
  .chat-container {
    height: 600px;
    border: 1px solid #e4e7ed;
    border-radius: 12px;
    overflow: hidden;
    background: #f8f9fa;
    
    .chat-iframe-container {
      height: 100%;
      width: 100%;
      
      .chat-iframe {
        width: 100%;
        height: 100%;
        border: none;
        background: white;
        border-radius: 12px;
      }
    }
    
    .loading-chat {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      color: #909399;
      gap: 12px;
      
      .loading-icon {
        font-size: 24px;
        animation: rotate 2s linear infinite;
      }
      
      @keyframes rotate {
        from { transform: rotate(0deg); }
        to { transform: rotate(360deg); }
      }
    }
  }
}

@media (max-width: 768px) {
  .ai-chat-dialog {
    .chat-container {
      height: 400px;
    }
  }
}
</style>

<!-- üîß ÂÖ®Â±ÄÊ†∑ÂºèÔºöPortal‰∏≠ÁöÑAIÊåâÈíÆ -->
<style lang="scss">
.ai-chat-button-portal {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 12px 18px;
  border-radius: 26px;
  cursor: pointer;
  display: flex;
  align-items: center;
  gap: 6px;
  font-size: 15px;
  font-weight: 600;
  box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  white-space: nowrap;
  min-width: 70px;
  justify-content: center;
  pointer-events: auto;
  user-select: none;
  
  // üîß Â∞è‰∏âËßíÂΩ¢ÊåáÂêëÂ§¥ÂÉè
  &:after {
    content: '';
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    border-left: 7px solid transparent;
    border-right: 7px solid transparent;
    border-top: 7px solid #667eea;
    filter: drop-shadow(0 1px 1px rgba(0, 0, 0, 0.1));
  }
  
  &:hover {
    transform: translateY(-2px) scale(1.08);
    box-shadow: 0 10px 28px rgba(102, 126, 234, 0.5);
    background: linear-gradient(135deg, #7c8df0 0%, #8b5fbf 100%);
  }
  
  &:active {
    transform: translateY(0) scale(1.02);
    transition: all 0.1s ease;
  }
  
  .el-icon {
    font-size: 20px;
  }
  
  span {
    font-size: 14px;
    font-weight: 700;
    letter-spacing: 0.3px;
  }
}

// üîß ÊåâÈíÆÂä®Áîª‰ºòÂåñ
.ai-button-fade-enter-active,
.ai-button-fade-leave-active {
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1) !important;
}

.ai-button-fade-enter-from {
  opacity: 0 !important;
  transform: translateY(-15px) scale(0.8) !important;
}

.ai-button-fade-leave-to {
  opacity: 0 !important;
  transform: translateY(-15px) scale(0.8) !important;
}

// üîß ÁßªÂä®Á´ØÈÄÇÈÖç
@media (max-width: 768px) {
  .ai-chat-button-portal {
    padding: 10px 14px !important;
    font-size: 12px !important;
    border-radius: 22px !important;
    min-width: 56px !important;
    
    .el-icon {
      font-size: 16px !important;
    }
    
    span {
      font-size: 11px !important;
    }
    
    &:after {
      border-left-width: 5px !important;
      border-right-width: 5px !important;
      border-top-width: 5px !important;
    }
  }
}

// üîß È´òÂØπÊØîÂ∫¶Ê®°ÂºèÊîØÊåÅ
@media (prefers-contrast: high) {
  .ai-chat-button-portal {
    border: 2px solid white;
    background: #0066cc !important;
    
    &:hover {
      background: #004499 !important;
    }
  }
}

// üîß ÂáèÂ∞ëÂä®ÁîªÊ®°ÂºèÊîØÊåÅ
@media (prefers-reduced-motion: reduce) {
  .ai-chat-button-portal,
  .ai-button-fade-enter-active,
  .ai-button-fade-leave-active {
    transition: none !important;
  }
}
</style>
