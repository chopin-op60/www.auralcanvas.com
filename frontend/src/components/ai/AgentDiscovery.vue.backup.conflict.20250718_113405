<template>
  <div class="agent-discovery">
    <div class="discovery-header">
      <h3>Discover AI Agents</h3>
      <p>Chat with AI agents created by other users</p>
    </div>

    <div v-loading="loading" class="agents-grid">
      <div v-for="agent in agents" :key="agent.id" class="agent-card">
        <div class="agent-info">
          <el-avatar :src="getFileUrl(agent.avatar)" :size="50">
            <el-icon><User /></el-icon>
          </el-avatar>
          <div class="info-content">
            <h4>{{ agent.agent_name || `${agent.username}'s AI Assistant` }}</h4>
            <p class="username">by {{ agent.username }}</p>
            <p v-if="agent.agent_description" class="description">
              {{ truncateText(agent.agent_description, 100) }}
            </p>
            <div class="agent-status">
              <el-tag size="small" type="success">
                <el-icon><ChatDotSquare /></el-icon>
                Active
              </el-tag>
            </div>
          </div>
        </div>
        <div class="agent-actions">
          <el-button type="primary" size="small" @click="chatWithAgent(agent)">
            <el-icon><ChatDotSquare /></el-icon>
            Start Chat
          </el-button>
        </div>
      </div>
    </div>

    <div v-if="agents.length === 0 && !loading" class="empty-state">
      <el-empty description="No public AI agents available yet">
        <template #description>
          <p>No public AI agents are available at the moment.</p>
          <p>Be the first to create and share your AI agent!</p>
        </template>
        <el-button type="primary" @click="$router.push('/ai')">
          Create Your AI Agent
        </el-button>
      </el-empty>
    </div>

    <!-- Chat Dialog -->
    <el-dialog
      v-model="chatDialogVisible"
      :title="currentAgent?.agent_name || 'AI Chat'"
      width="90%"
      class="agent-chat-dialog"
      @close="cleanupChat"
    >
      <div class="chat-container">
        <div v-if="currentAgent?.external_script_code && processedAICode" class="chat-iframe-container">
          <div ref="chatContainer" class="chat-content" v-html="processedAICode"></div>
        </div>
        <div v-else class="no-chat">
          <el-empty description="Chat interface not available" />
        </div>
      </div>
    </el-dialog>
  </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue'
import { ElMessage } from 'element-plus'
import { User, ChatDotSquare } from '@element-plus/icons-vue'
import { getPublicAgents, getUserAgent } from '@/api/ai'
import { getFileUrl, truncateText } from '@/utils'

const loading = ref(false)
const agents = ref([])
const chatDialogVisible = ref(false)
const currentAgent = ref(null)
const chatContainer = ref()

// 处理AI代理代码，支持iframe和script两种格式
const processedAICode = computed(() => {
  if (!currentAgent.value?.external_script_code) return ''
  
  const code = currentAgent.value.external_script_code.trim()
  console.log('Processing AI code for discovery:', code.substring(0, 100) + '...')
  
  // 检查是否为iframe代码
  if (code.includes('<iframe')) {
    console.log('Detected iframe code in discovery')
    // 确保iframe样式正确
    let processedIframe = code
    
    // 如果没有设置样式，添加默认样式
    if (!code.includes('style=')) {
      processedIframe = code.replace('<iframe', '<iframe style="width: 100%; height: 100%; border: none;"')
    }
    
    // 修复allow属性（如果有语法错误）
    processedIframe = processedIframe.replace(/allow="[^"]*\*[^"]*"/, 'allow="microphone"')
    
    console.log('Processed iframe for discovery:', processedIframe.substring(0, 100) + '...')
    return processedIframe
  }
  
  // 如果是script代码，直接返回
  if (code.includes('<script')) {
    console.log('Detected script code in discovery')
    return code
  }
  
  // 如果是纯URL，创建iframe
  if (code.startsWith('http')) {
    console.log('Detected URL in discovery, creating iframe')
    return `<iframe src="${code}" style="width: 100%; height: 100%; border: none;" allow="microphone"></iframe>`
  }
  
  console.warn('Unknown code format in discovery')
  return ''
})

// 加载公开AI代理
const loadPublicAgents = async () => {
  loading.value = true
  try {
    console.log('Loading public agents...')
    const response = await getPublicAgents({ limit: 20 })
    agents.value = response.data.agents || []
    console.log('Loaded agents:', agents.value.length)
  } catch (error) {
    console.error('Failed to load public agents:', error)
    ElMessage.error('Failed to load AI agents')
  } finally {
    loading.value = false
  }
}

// 与AI代理对话
const chatWithAgent = async (agent) => {
  try {
    console.log('=== chatWithAgent called (Discovery) ===')
    console.log('Agent basic info:', agent)
    
    // 获取完整的代理信息（包括script代码）
    const response = await getUserAgent(agent.user_id)
    currentAgent.value = response.data
    console.log('Full agent data:', currentAgent.value)
    console.log('Script code length:', currentAgent.value.external_script_code?.length || 0)
    
    if (!processedAICode.value) {
      console.error('No valid AI code found')
      ElMessage.error('Invalid AI chat configuration')
      return
    }
    
    console.log('Opening chat dialog with processed code')
    chatDialogVisible.value = true
    
    // 使用v-html自动注入代码，不需要手动操作DOM
    ElMessage.success('AI chat loaded successfully')
    
  } catch (error) {
    console.error('Failed to access agent:', error)
    ElMessage.error('Cannot access this AI agent')
  }
}

// 清理聊天容器
const cleanupChat = () => {
  if (chatContainer.value) {
    chatContainer.value.innerHTML = ''
  }
  currentAgent.value = null
  console.log('Discovery chat cleaned up')
}

onMounted(() => {
  loadPublicAgents()
})
</script>

<style lang="scss" scoped>
.agent-discovery {
  .discovery-header {
    text-align: center;
    margin-bottom: 30px;
    
    h3 {
      color: #303133;
      margin-bottom: 8px;
    }
    
    p {
      color: #909399;
      font-size: 14px;
    }
  }
  
  .agents-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
  }
  
  .agent-card {
    border: 1px solid #e4e7ed;
    border-radius: 12px;
    padding: 20px;
    transition: all 0.3s;
    background: white;
    
    &:hover {
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      border-color: #409eff;
      transform: translateY(-2px);
    }
    
    .agent-info {
      display: flex;
      gap: 15px;
      margin-bottom: 15px;
      
      .info-content {
        flex: 1;
        
        h4 {
          margin: 0 0 5px 0;
          color: #303133;
          font-size: 16px;
          font-weight: 600;
        }
        
        .username {
          margin: 0 0 8px 0;
          color: #909399;
          font-size: 12px;
        }
        
        .description {
          margin: 0 0 10px 0;
          color: #606266;
          font-size: 14px;
          line-height: 1.4;
        }
        
        .agent-status {
          .el-tag {
            .el-icon {
              margin-right: 4px;
              font-size: 12px;
            }
          }
        }
      }
    }
    
    .agent-actions {
      text-align: right;
      
      .el-button {
        .el-icon {
          margin-right: 6px;
        }
      }
    }
  }
  
  .empty-state {
    text-align: center;
    padding: 60px 20px;
    
    .el-empty {
      :deep(.el-empty__description) {
        p {
          margin: 8px 0;
          color: #909399;
        }
      }
    }
  }
}

.agent-chat-dialog {
  .chat-container {
    height: 600px;
    border: 1px solid #dcdfe6;
    border-radius: 8px;
    overflow: hidden;
    background: #f8f9fa;
    
    .chat-iframe-container {
      height: 100%;
      width: 100%;
      
      .chat-content {
        height: 100%;
        width: 100%;
        background: white;
        
        // 确保iframe样式正确
        :deep(iframe) {
          width: 100% !important;
          height: 100% !important;
          border: none !important;
        }
      }
    }
    
    .no-chat {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
      background: white;
    }
  }
}

@media (max-width: 768px) {
  .agents-grid {
    grid-template-columns: 1fr;
    gap: 15px;
  }
  
  .agent-card {
    padding: 15px;
    
    .agent-actions {
      text-align: center;
      
      .el-button {
        width: 100%;
      }
    }
  }
  
  .agent-chat-dialog {
    .chat-container {
      height: 400px;
    }
  }
}
</style>
