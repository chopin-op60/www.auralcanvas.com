<template>
  <div class="create-post-page">
    <div class="create-container">
      <div class="page-header">
        <h1>Create New Post</h1>
        <p>Share your creativity with text, images, and audio all in one post</p>
      </div>

      <el-form
        ref="postFormRef"
        :model="postForm"
        :rules="postRules"
        label-width="120px"
        class="post-form"
      >
        <el-form-item label="Post Title" prop="title">
          <el-input
            v-model="postForm.title"
            placeholder="What's your post about?"
            maxlength="200"
            show-word-limit
            size="large"
          />
        </el-form-item>

        <el-form-item label="Description" prop="description">
          <el-input
            v-model="postForm.description"
            type="textarea"
            :rows="2"
            placeholder="Add a short description (optional)"
            maxlength="500"
            show-word-limit
          />
        </el-form-item>

        <el-form-item label="Content" prop="content_text">
          <el-input
            v-model="postForm.content_text"
            type="textarea"
            :rows="6"
            placeholder="Write your thoughts, story, or message..."
            maxlength="5000"
            show-word-limit
          />
        </el-form-item>

        <el-form-item label="Media Files">
          <div class="media-upload-section">
            <el-upload
              ref="uploadRef"
              class="media-uploader"
              drag
              multiple
              :auto-upload="false"
              :limit="10"
              accept=".jpg,.jpeg,.png,.gif,.webp,.mp3,.wav,.m4a,.ogg,.flac"
              :before-upload="beforeUpload"
              :on-change="handleFileChange"
              :on-remove="handleFileRemove"
              :file-list="fileList"
            >
              <div class="upload-content">
                <el-icon class="upload-icon">
                  <UploadFilled />
                </el-icon>
                <div class="upload-text">
                  <p>Drop images and audio files here or <em>click to upload</em></p>
                  <p class="upload-tip">
                    Support: JPG, PNG, GIF, WebP, MP3, WAV, M4A, OGG, FLAC (Max 100MB each, 10 files total)
                  </p>
                </div>
              </div>
            </el-upload>
            
            <!-- File Preview Section -->
            <div v-if="uploadedFiles.length > 0" class="files-preview">
              <h4>Uploaded Files ({{ uploadedFiles.length }})</h4>
              <div class="files-grid">
                <div 
                  v-for="(file, index) in uploadedFiles" 
                  :key="index" 
                  class="file-item"
                >
                  <!-- Image Preview -->
                  <div v-if="isImageFile(file)" class="image-file">
                    <el-image 
                      :src="file.preview" 
                      fit="cover"
                      class="file-preview-image"
                    />
                    <div class="file-info">
                      <p class="file-name">{{ file.name }}</p>
                      <p class="file-size">{{ formatFileSize(file.size) }}</p>
                    </div>
                    <el-button 
                      class="remove-btn" 
                      circle 
                      size="small" 
                      type="danger"
                      @click="removeFile(index)"
                    >
                      <el-icon><Close /></el-icon>
                    </el-button>
                  </div>
                  
                  <!-- Audio Preview -->
                  <div v-else-if="isAudioFile(file)" class="audio-file">
                    <div class="audio-icon">
                      <el-icon><Microphone /></el-icon>
                    </div>
                    <div class="file-info">
                      <p class="file-name">{{ file.name }}</p>
                      <p class="file-size">{{ formatFileSize(file.size) }}</p>
                      <audio 
                        v-if="file.preview" 
                        :src="file.preview" 
                        controls 
                        class="audio-player"
                        preload="metadata"
                      />
                    </div>
                    <el-button 
                      class="remove-btn" 
                      circle 
                      size="small" 
                      type="danger"
                      @click="removeFile(index)"
                    >
                      <el-icon><Close /></el-icon>
                    </el-button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </el-form-item>

        <el-form-item class="form-actions">
          <el-button 
            type="primary" 
            size="large"
            :loading="submitting" 
            @click="submitPost"
            :disabled="!isFormValid"
          >
            <el-icon><Upload /></el-icon>
            Publish Post
          </el-button>
          <el-button size="large" @click="resetForm">
            <el-icon><Refresh /></el-icon>
            Reset
          </el-button>
          <el-button size="large" @click="$router.back()">
            <el-icon><ArrowLeft /></el-icon>
            Cancel
          </el-button>
        </el-form-item>
      </el-form>
    </div>
  </div>
</template>

<script setup>
import { ref, reactive, computed } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { 
  UploadFilled, Upload, Refresh, ArrowLeft, Close, Microphone
} from '@element-plus/icons-vue'
import { createPost } from '@/api/posts'
import { formatFileSize } from '@/utils'

const router = useRouter()

const postFormRef = ref()
const uploadRef = ref()
const submitting = ref(false)
const uploadedFiles = ref([])
const fileList = ref([])

// Form data
const postForm = reactive({
  title: '',
  description: '',
  content_text: ''
})

// Validation rules
const postRules = {
  title: [
    { required: true, message: 'Please enter post title', trigger: 'blur' },
    { min: 2, max: 200, message: 'Title must be 2-200 characters', trigger: 'blur' }
  ]
}

// Form validation
const isFormValid = computed(() => {
  const hasTitle = postForm.title?.trim();
  const hasContent = postForm.content_text?.trim();
  const hasFiles = uploadedFiles.value.length > 0;
  
  // Must have title and at least content or files
  return hasTitle && (hasContent || hasFiles);
})

// File type checkers
const isImageFile = (file) => {
  return file.type?.startsWith('image/') || 
         /\.(jpg|jpeg|png|gif|webp|bmp)$/i.test(file.name);
}

const isAudioFile = (file) => {
  return file.type?.startsWith('audio/') || 
         /\.(mp3|wav|m4a|ogg|flac)$/i.test(file.name);
}

// File upload handlers
const beforeUpload = (file) => {
  console.log('beforeUpload called with:', file.name, file.type, file.size)
  
  const isValidType = isImageFile(file) || isAudioFile(file);
  const isValidSize = file.size < 100 * 1024 * 1024; // 100MB

  if (!isValidType) {
    ElMessage.error('Only image and audio files are supported');
    return false;
  }
  
  if (!isValidSize) {
    ElMessage.error('File size cannot exceed 100MB');
    return false;
  }

  return false; // Prevent auto upload
}

const handleFileChange = (file, fileList) => {
  console.log('handleFileChange called:', file);
  
  if (!file.raw) return;
  
  const rawFile = file.raw;
  
  // Check file validity
  if (!beforeUpload(rawFile)) {
    return;
  }
  
  // Create preview URL
  const previewUrl = URL.createObjectURL(rawFile);
  
  const fileData = {
    name: rawFile.name,
    size: rawFile.size,
    type: rawFile.type,
    preview: previewUrl,
    raw: rawFile
  };
  
  uploadedFiles.value.push(fileData);
  ElMessage.success(`File "${rawFile.name}" added successfully`);
}

const handleFileRemove = (file) => {
  console.log('handleFileRemove called:', file);
  
  // Find and remove from uploadedFiles
  const index = uploadedFiles.value.findIndex(f => f.name === file.name);
  if (index > -1) {
    removeFile(index);
  }
}

const removeFile = (index) => {
  const file = uploadedFiles.value[index];
  if (file?.preview) {
    URL.revokeObjectURL(file.preview);
  }
  uploadedFiles.value.splice(index, 1);
  
  // Update fileList to sync with el-upload
  fileList.value = fileList.value.filter((_, i) => i !== index);
}

// Submit post
const submitPost = async () => {
  console.log('submitPost called, form valid:', isFormValid.value);
  
  if (!postFormRef.value) return;
  
  try {
    await postFormRef.value.validate();
    
    if (!isFormValid.value) {
      ElMessage.error('Please add a title and either text content or media files');
      return;
    }
    
    submitting.value = true;
    
    const formData = new FormData();
    formData.append('title', postForm.title.trim());
    
    if (postForm.description?.trim()) {
      formData.append('description', postForm.description.trim());
    }
    
    if (postForm.content_text?.trim()) {
      formData.append('content_text', postForm.content_text.trim());
    }
    
    // Add all files
    uploadedFiles.value.forEach((file, index) => {
      formData.append('files', file.raw, file.name);
    });

    console.log('Sending mixed-content post with:', {
      title: formData.get('title'),
      description: formData.get('description'),
      content_text: formData.get('content_text'),
      filesCount: uploadedFiles.value.length
    });

    await createPost(formData);
    
    ElMessage.success('Post created successfully!');
    
    // Clean up preview URLs
    uploadedFiles.value.forEach(file => {
      if (file.preview) {
        URL.revokeObjectURL(file.preview);
      }
    });
    
    router.push('/home');
    
  } catch (error) {
    console.error('Failed to create post:', error);
    const errorMessage = error.response?.data?.message || error.message || 'Failed to create post';
    ElMessage.error(errorMessage);
  } finally {
    submitting.value = false;
  }
}

// Reset form
const resetForm = () => {
  if (postFormRef.value) {
    postFormRef.value.resetFields();
  }
  
  // Clean up files
  uploadedFiles.value.forEach(file => {
    if (file.preview) {
      URL.revokeObjectURL(file.preview);
    }
  });
  uploadedFiles.value = [];
  fileList.value = [];
  
  if (uploadRef.value) {
    uploadRef.value.clearFiles();
  }
  
  Object.assign(postForm, {
    title: '',
    description: '',
    content_text: ''
  });
}
</script>

<style lang="scss" scoped>
.create-post-page {
  padding: 20px;
  max-width: 900px;
  margin: 0 auto;
}

.create-container {
  background: white;
  border-radius: 16px;
  padding: 40px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
}

.page-header {
  text-align: center;
  margin-bottom: 40px;
  
  h1 {
    font-size: 32px;
    color: #303133;
    margin-bottom: 8px;
    font-weight: 700;
  }
  
  p {
    color: #909399;
    font-size: 16px;
  }
}

.media-upload-section {
  .media-uploader {
    margin-bottom: 20px;
    
    :deep(.el-upload-dragger) {
      width: 100%;
      height: 200px;
      border-radius: 12px;
      border: 2px dashed #dcdfe6;
      transition: all 0.3s;
      
      &:hover {
        border-color: #409EFF;
        background: #f0f9ff;
      }
    }
    
    .upload-content {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100%;
      padding: 20px;
      
      .upload-icon {
        font-size: 48px;
        color: #409EFF;
        margin-bottom: 16px;
      }
      
      .upload-text {
        text-align: center;
        
        p:first-child {
          font-size: 16px;
          color: #606266;
          margin-bottom: 8px;
          
          em {
            color: #409EFF;
            font-style: normal;
            font-weight: 500;
          }
        }
        
        .upload-tip {
          font-size: 13px;
          color: #909399;
          line-height: 1.4;
        }
      }
    }
  }
  
  .files-preview {
    h4 {
      color: #303133;
      margin-bottom: 16px;
      font-size: 16px;
    }
    
    .files-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 16px;
      
      .file-item {
        position: relative;
        border: 1px solid #e4e7ed;
        border-radius: 8px;
        overflow: hidden;
        background: #fafafa;
        
        .remove-btn {
          position: absolute;
          top: 8px;
          right: 8px;
          z-index: 10;
        }
        
        .image-file {
          .file-preview-image {
            width: 100%;
            height: 120px;
          }
          
          .file-info {
            padding: 12px;
          }
        }
        
        .audio-file {
          display: flex;
          flex-direction: column;
          padding: 16px;
          
          .audio-icon {
            text-align: center;
            margin-bottom: 12px;
            
            .el-icon {
              font-size: 32px;
              color: #409EFF;
            }
          }
          
          .audio-player {
            width: 100%;
            margin-top: 8px;
          }
        }
        
        .file-info {
          .file-name {
            font-size: 14px;
            color: #303133;
            margin: 0 0 4px 0;
            font-weight: 500;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
          }
          
          .file-size {
            font-size: 12px;
            color: #909399;
            margin: 0;
          }
        }
      }
    }
  }
}

.form-actions {
  margin-top: 40px;
  
  .el-button {
    margin-right: 12px;
    
    .el-icon {
      margin-right: 6px;
    }
  }
}

@media (max-width: 768px) {
  .create-post-page {
    padding: 15px;
  }
  
  .create-container {
    padding: 25px 20px;
  }
  
  .files-grid {
    grid-template-columns: 1fr !important;
  }
  
  .form-actions .el-button {
    display: block;
    width: 100%;
    margin-bottom: 12px;
  }
}
</style>
