<template>
  <div class="messages-page">
    <div class="messages-container">
      <!-- Conversations List -->
      <div class="conversations-sidebar">
        <div class="sidebar-header">
          <h2>Messages</h2>
        </div>
        
        <div class="conversations-list">
          <ConversationsList 
            :conversations="conversations"
            :loading="conversationsLoading"
            :activeConversation="activeConversationId"
            @conversation-selected="handleConversationSelected"
            @conversation-deleted="handleConversationDeleted"
          />
        </div>
      </div>
      
      <!-- Chat Area -->
      <div class="chat-area">
        <div v-if="!activeConversationId" class="no-conversation">
          <el-empty description="Select a conversation to start chatting">
            <el-button type="primary" @click="$router.push('/friends')">
              Go to Friends
            </el-button>
          </el-empty>
        </div>
        
        <ChatWindow 
          v-else
          :conversationId="activeConversationId"
          :conversation="activeConversation"
          @message-sent="handleMessageSent"
          @conversation-deleted="handleConversationDeleted"
        />
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { getConversations } from '@/api/messages'
import ConversationsList from '@/components/messages/ConversationsList.vue'
import ChatWindow from '@/components/messages/ChatWindow.vue'

const route = useRoute()
const router = useRouter()

const conversations = ref([])
const conversationsLoading = ref(false)
const activeConversationId = ref(null)

const activeConversation = computed(() => {
  return conversations.value.find(c => c.id === activeConversationId.value)
})

const loadConversations = async () => {
  conversationsLoading.value = true
  try {
    console.log('Loading conversations...')
    const response = await getConversations()
    console.log('API response:', response)
    
    if (response.success && response.data) {
      if (response.data.conversations) {
        conversations.value = response.data.conversations || []
        console.log('Conversations loaded:', conversations.value.length)
        console.log('Conversations data:', conversations.value)
      } else {
        // 兼容旧格式
        conversations.value = response.data || []
        console.log('Conversations loaded (legacy format):', conversations.value.length)
      }
    } else {
      console.warn('Invalid response format:', response)
      conversations.value = []
    }
    
    // 如果路由中有conversation ID，设置为活跃对话
    if (route.params.id) {
      const conversationId = parseInt(route.params.id)
      console.log('Setting active conversation from route:', conversationId)
      activeConversationId.value = conversationId
    }
  } catch (error) {
    console.error('Failed to load conversations:', error)
    ElMessage.error('Failed to load conversations')
    conversations.value = []
  } finally {
    conversationsLoading.value = false
  }
}

const handleConversationSelected = (conversationId) => {
  console.log('Conversation selected:', conversationId)
  activeConversationId.value = conversationId
  router.push(`/messages/${conversationId}`)
}

const handleMessageSent = () => {
  console.log('Message sent, refreshing conversations...')
  // 刷新对话列表以更新最后消息时间
  loadConversations()
}

// 🔥 处理对话删除
const handleConversationDeleted = (deletedConversationId) => {
  console.log('Conversation deleted:', deletedConversationId)
  
  // 从列表中移除已删除的对话
  conversations.value = conversations.value.filter(c => c.id !== deletedConversationId)
  
  // 如果删除的是当前活跃对话，清除活跃状态
  if (activeConversationId.value === deletedConversationId) {
    activeConversationId.value = null
    router.push('/messages')
  }
  
  // 如果没有对话了，显示空状态
  if (conversations.value.length === 0) {
    console.log('No conversations left')
  }
}

onMounted(() => {
  loadConversations()
})
</script>

<style lang="scss" scoped>
.messages-page {
  height: calc(100vh - 120px);
  max-height: 800px;
  background: #f8fafb; // 与首页背景一致
}

.messages-container {
  display: flex;
  height: 100%;
  background: white;
  border-radius: 16px; // 增大圆角
  overflow: hidden;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08); // 增强阴影
  border: 1px solid rgba(0, 0, 0, 0.04);
}

.conversations-sidebar {
  width: 320px;
  border-right: 1px solid #e4e7ed;
  display: flex;
  flex-direction: column;
  background: #fafbfc; // 轻微背景色区分
  
  .sidebar-header {
    padding: 24px 20px 16px;
    border-bottom: 1px solid #f0f0f0;
    background: white;
    
    h2 {
      margin: 0;
      color: #303133;
      font-size: 20px;
      font-weight: 700;
    }
  }
  
  .conversations-list {
    flex: 1;
    overflow-y: auto;
    background: white;
  }
}

.chat-area {
  flex: 1;
  display: flex;
  flex-direction: column;
  background: white;
  
  .no-conversation {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 40px;
    
    .el-empty {
      :deep(.el-empty__description) {
        margin-bottom: 20px;
      }
    }
  }
}

@media (max-width: 768px) {
  .messages-page {
    background: #f8fafb;
  }
  
  .messages-container {
    flex-direction: column;
    border-radius: 12px;
  }
  
  .conversations-sidebar {
    width: 100%;
    max-height: 200px;
    
    .sidebar-header {
      padding: 16px;
      
      h2 {
        font-size: 18px;
      }
    }
  }
  
  .chat-area .no-conversation {
    padding: 30px 20px;
  }
}
</style>
