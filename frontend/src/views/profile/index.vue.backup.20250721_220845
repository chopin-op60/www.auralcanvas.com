<template>
  <div class="profile-page">
    <div v-if="loading" class="loading-container">
      <el-skeleton :rows="5" animated />
    </div>
    
    <div v-else class="profile-container">
      <!-- Cover Image -->
      <div class="cover-section">
        <div 
          class="cover-image"
          :style="{ backgroundImage: profile.cover_image ? `url(${getFileUrl(profile.cover_image)})` : 'none' }"
        >
          <div v-if="!profile.cover_image" class="default-cover">
            <el-icon><Picture /></el-icon>
            <p>No cover image</p>
          </div>
        </div>
      </div>
      
      <!-- Profile Info -->
      <div class="profile-info">
        <div class="avatar-section">
          <el-avatar 
            :src="profile.avatar ? getFileUrl(profile.avatar) : null" 
            :size="120"
            class="profile-avatar"
          >
            <el-icon><User /></el-icon>
          </el-avatar>
        </div>
        
        <div class="info-section">
          <h1 class="username">{{ profile.username }}</h1>
          <p v-if="profile.bio" class="bio">{{ profile.bio }}</p>
          
          <div class="meta-info">
            <div v-if="profile.location" class="meta-item">
              <el-icon><Location /></el-icon>
              <span>{{ profile.location }}</span>
            </div>
            <div v-if="profile.website" class="meta-item">
              <el-icon><Link /></el-icon>
              <a :href="profile.website" target="_blank">{{ profile.website }}</a>
            </div>
            <div class="meta-item">
              <el-icon><Calendar /></el-icon>
              <span>Joined {{ formatDate(profile.created_at, 'MMMM YYYY') }}</span>
            </div>
          </div>
          
          <div class="stats">
            <div class="stat-item">
              <span class="number">{{ profile.posts_count || 0 }}</span>
              <span class="label">Posts</span>
            </div>
            <div class="stat-item">
              <span class="number">{{ profile.followers_count || 0 }}</span>
              <span class="label">Followers</span>
            </div>
            <div class="stat-item">
              <span class="number">{{ profile.following_count || 0 }}</span>
              <span class="label">Following</span>
            </div>
          </div>
        </div>
        
        <div class="actions-section">
          <el-button type="primary" @click="$router.push('/profile/edit')">
            <el-icon><Edit /></el-icon>
            Edit Profile
          </el-button>
          <el-button @click="$router.push('/ai')">
            <el-icon><Setting /></el-icon>
            AI Agent
          </el-button>
        </div>
      </div>
      
      <!-- Posts Section -->
      <div class="posts-section">
        <el-tabs v-model="activeTab" class="profile-tabs" @tab-change="handleTabChange">
          <el-tab-pane label="My Posts" name="posts">
            <PostList 
              :posts="userPosts" 
              :loading="postsLoading" 
              @post-deleted="handlePostDeleted"
              @post-updated="handlePostUpdated"
            />
          </el-tab-pane>
          <el-tab-pane label="Liked Posts" name="liked">
            <PostList 
              :posts="likedPosts" 
              :loading="likedPostsLoading" 
              @post-deleted="handleLikedPostDeleted"
              @post-updated="handleLikedPostUpdated"
            />
          </el-tab-pane>
        </el-tabs>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted } from 'vue'
import { ElMessage } from 'element-plus'
import { Picture, User, Location, Link, Calendar, Edit, Setting } from '@element-plus/icons-vue'
import { useUserStore } from '@/stores/user'
import { getUserProfile } from '@/api/auth'
import { getUserPosts, getUserLikedPosts } from '@/api/users'
import { getFileUrl, formatDate } from '@/utils'
import PostList from '@/components/post/PostList.vue'

const userStore = useUserStore()
const loading = ref(true)
const postsLoading = ref(false)
const likedPostsLoading = ref(false)
const profile = ref({})
const userPosts = ref([])
const likedPosts = ref([])
const activeTab = ref('posts')

// Tab change handler
const handleTabChange = async (tab) => {
  if (tab === 'liked' && likedPosts.value.length === 0) {
    await loadLikedPosts()
  }
}

// Load profile data
const loadProfile = async () => {
  try {
    loading.value = true
    const response = await getUserProfile()
    profile.value = response.data
  } catch (error) {
    console.error('Failed to load profile:', error)
    ElMessage.error('Failed to load profile')
  } finally {
    loading.value = false
  }
}

// Load user posts
const loadUserPosts = async () => {
  try {
    postsLoading.value = true
    const response = await getUserPosts(userStore.userId, { limit: 20 })
    userPosts.value = response.data.posts || []
  } catch (error) {
    console.error('Failed to load user posts:', error)
    ElMessage.error('Failed to load posts')
  } finally {
    postsLoading.value = false
  }
}

// Load liked posts
const loadLikedPosts = async () => {
  try {
    likedPostsLoading.value = true
    const response = await getUserLikedPosts(userStore.userId, { limit: 20 })
    likedPosts.value = response.data.posts || []
    console.log('Loaded liked posts:', likedPosts.value.length)
  } catch (error) {
    console.error('Failed to load liked posts:', error)
    ElMessage.error('Failed to load liked posts')
  } finally {
    likedPostsLoading.value = false
  }
}

// Handle post deleted from user posts
const handlePostDeleted = (deletedPostId) => {
  console.log('Profile: Post deleted from user posts:', deletedPostId)
  userPosts.value = userPosts.value.filter(post => post.id !== deletedPostId)
  
  // Update posts count
  if (profile.value.posts_count > 0) {
    profile.value.posts_count--
  }
  
  ElMessage.success('Post deleted successfully')
}

// Handle post deleted from liked posts (when others delete)
const handleLikedPostDeleted = (deletedPostId) => {
  console.log('Profile: Post deleted from liked posts:', deletedPostId)
  likedPosts.value = likedPosts.value.filter(post => post.id !== deletedPostId)
  
  ElMessage.info('A post you liked has been deleted')
}

// Handle post updated (like status changed)
const handlePostUpdated = (updatedData) => {
  console.log('Profile: Post updated in user posts:', updatedData)
  const post = userPosts.value.find(p => p.id === updatedData.id)
  if (post) {
    Object.assign(post, updatedData)
  }
}

const handleLikedPostUpdated = (updatedData) => {
  console.log('Profile: Post updated in liked posts:', updatedData)
  const post = likedPosts.value.find(p => p.id === updatedData.id)
  if (post) {
    Object.assign(post, updatedData)
    
    // If user unliked this post, remove from liked posts list
    if ('liked' in updatedData && !updatedData.liked) {
      console.log('Removing unliked post from liked posts list')
      likedPosts.value = likedPosts.value.filter(p => p.id !== updatedData.id)
    }
  }
}

onMounted(async () => {
  await loadProfile()
  await loadUserPosts()
})
</script>

<style lang="scss" scoped>
.profile-page {
  max-width: 900px;
  margin: 0 auto;
}

.loading-container {
  padding: 40px;
  background: white;
  border-radius: 12px;
}

.profile-container {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
}

.cover-section {
  .cover-image {
    height: 200px;
    background-size: cover;
    background-position: center;
    background-color: #f8f9fa;
    display: flex;
    align-items: center;
    justify-content: center;
    
    .default-cover {
      text-align: center;
      color: #909399;
      
      .el-icon {
        font-size: 48px;
        margin-bottom: 8px;
      }
      
      p {
        margin: 0;
        font-size: 14px;
      }
    }
  }
}

.profile-info {
  padding: 20px 30px;
  display: grid;
  grid-template-columns: auto 1fr auto;
  gap: 20px;
  align-items: start;
  position: relative;
  margin-top: -60px;
  
  .avatar-section {
    .profile-avatar {
      border: 4px solid white;
      box-shadow: 0 2px 12px rgba(0, 0, 0, 0.15);
    }
  }
  
  .info-section {
    padding-top: 60px;
    
    .username {
      font-size: 28px;
      font-weight: 700;
      color: #303133;
      margin: 0 0 8px 0;
    }
    
    .bio {
      color: #606266;
      margin: 0 0 16px 0;
      line-height: 1.6;
      font-size: 16px;
    }
    
    .meta-info {
      display: flex;
      flex-wrap: wrap;
      gap: 16px;
      margin-bottom: 16px;
      
      .meta-item {
        display: flex;
        align-items: center;
        gap: 6px;
        color: #909399;
        font-size: 14px;
        
        .el-icon {
          font-size: 16px;
        }
        
        a {
          color: #409EFF;
          text-decoration: none;
          
          &:hover {
            text-decoration: underline;
          }
        }
      }
    }
    
    .stats {
      display: flex;
      gap: 24px;
      
      .stat-item {
        text-align: center;
        
        .number {
          display: block;
          font-size: 18px;
          font-weight: 600;
          color: #303133;
        }
        
        .label {
          display: block;
          font-size: 12px;
          color: #909399;
          margin-top: 2px;
        }
      }
    }
  }
  
  .actions-section {
    padding-top: 60px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    
    .el-button .el-icon {
      margin-right: 6px;
    }
  }
}

.posts-section {
  border-top: 1px solid #e4e7ed;
  
  .profile-tabs {
    :deep(.el-tabs__header) {
      margin: 0;
      padding: 0 30px;
      background: #fafbfc;
    }
    
    :deep(.el-tabs__content) {
      padding: 20px 30px;
      min-height: 400px;
    }
  }
}

@media (max-width: 768px) {
  .profile-info {
    grid-template-columns: 1fr;
    text-align: center;
    gap: 15px;
    padding: 20px 15px;
    
    .info-section,
    .actions-section {
      padding-top: 0;
    }
    
    .actions-section {
      .el-button {
        width: 100%;
      }
    }
  }
  
  .posts-section {
    .profile-tabs {
      :deep(.el-tabs__header) {
        padding: 0 15px;
      }
      
      :deep(.el-tabs__content) {
        padding: 20px 15px;
      }
    }
  }
}
</style>
