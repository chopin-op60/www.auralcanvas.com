<template>
  <div class="user-profile-page">
    <div v-if="loading" class="loading-container">
      <el-skeleton :rows="5" animated />
    </div>
    
    <div v-else-if="!user" class="error-container">
      <el-result
        icon="warning"
        title="User Not Found"
        sub-title="The user you're looking for doesn't exist."
      >
        <template #extra>
          <el-button type="primary" @click="$router.push('/home')">
            Back to Home
          </el-button>
        </template>
      </el-result>
    </div>
    
    <div v-else class="profile-content">
      <!-- Cover Image -->
      <div class="cover-section">
        <div 
          class="cover-image"
          :style="{ backgroundImage: user.cover_image ? `url(${getFileUrl(user.cover_image)})` : 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)' }"
        >
          <div class="cover-overlay"></div>
        </div>
      </div>
      
      <!-- Profile Header -->
      <div class="profile-header">
        <div class="avatar-section">
          <el-avatar 
            :src="getFileUrl(user.avatar)" 
            :size="120"
            class="user-avatar"
          >
            <el-icon><User /></el-icon>
          </el-avatar>
        </div>
        
        <div class="user-info">
          <h1 class="username">{{ user.username }}</h1>
          <p v-if="user.bio" class="bio">{{ user.bio }}</p>
          
          <div class="user-details">
            <div v-if="user.location" class="detail-item">
              <el-icon><Location /></el-icon>
              <span>{{ user.location }}</span>
            </div>
            <div v-if="user.website" class="detail-item">
              <el-icon><Link /></el-icon>
              <a :href="user.website" target="_blank">{{ user.website }}</a>
            </div>
            <div class="detail-item">
              <el-icon><Calendar /></el-icon>
              <span>Joined {{ formatDate(user.created_at, 'MMM YYYY') }}</span>
            </div>
          </div>
          
          <div class="user-stats">
            <div class="stat-item">
              <span class="stat-number">{{ user.posts_count || 0 }}</span>
              <span class="stat-label">Posts</span>
            </div>
            <div class="stat-item">
              <span class="stat-number">{{ user.followers_count || 0 }}</span>
              <span class="stat-label">Followers</span>
            </div>
            <div class="stat-item">
              <span class="stat-number">{{ user.following_count || 0 }}</span>
              <span class="stat-label">Following</span>
            </div>
          </div>
        </div>
        
        <!-- Action Buttons -->
        <div v-if="!isCurrentUser" class="profile-actions">
          <el-button 
            v-if="friendStatus === 'none'" 
            type="primary" 
            @click="handleSendFriendRequest"
            :loading="actionLoading"
          >
            <el-icon><Plus /></el-icon>
            Add Friend
          </el-button>
          
          <el-button 
            v-else-if="friendStatus === 'pending'" 
            disabled
          >
            <el-icon><Clock /></el-icon>
            Request Sent
          </el-button>
          
          <el-button 
            v-else-if="friendStatus === 'accepted'" 
            @click="handleStartConversation"
            :loading="actionLoading"
          >
            <el-icon><ChatDotRound /></el-icon>
            Message
          </el-button>

          <!-- Regular AI Agent Chat Button -->
          <el-button 
            v-if="aiAgent && aiAgent.status === 'active'"
            type="success"
            @click="chatWithAI"
            :loading="aiLoading"
          >
            <el-icon><Setting /></el-icon>
            Chat with AI
          </el-button>
        </div>

        <!-- 🆕 Developer Test Actions (只有Chris_Liu本人访问自己的页面时显示) -->
        <div v-if="isCurrentUser && isChrisLiu" class="dev-test-actions">
          <el-divider content-position="left">
            <span style="color: #e6a23c; font-size: 12px;">Developer Testing</span>
          </el-divider>
          <div class="dev-buttons">
            <el-button 
              type="warning" 
              size="small"
              @click="chatWithDevAI"
              :loading="devAILoading"
            >
              <el-icon><Tools /></el-icon>
              Test Script AI
            </el-button>
          </div>
        </div>
      </div>
      
      <!-- Posts Section -->
      <div class="posts-section">
        <div class="section-header">
          <h2>Posts</h2>
        </div>
        
        <div v-if="postsLoading" class="loading-container">
          <el-skeleton :rows="3" animated />
        </div>
        
        <div v-else-if="userPosts.length === 0" class="empty-posts">
          <el-empty description="No posts yet" />
        </div>
        
        <div v-else class="posts-grid">
          <PostList 
            :posts="userPosts"
            :loading="postsLoading"
          />
        </div>
      </div>
    </div>

    <!-- Regular AI Chat Dialog -->
    <el-dialog
      v-model="aiChatVisible"
      :title="`Chat with ${user?.username}'s AI`"
      width="90%"
      class="ai-chat-dialog"
      @close="cleanupAIChat"
    >
      <div class="ai-chat-container">
        <div v-if="aiAgent?.external_script_code && aiSandboxUrl" class="chat-iframe-sandbox">
          <iframe
            ref="aiChatIframe"
            :src="aiSandboxUrl"
            class="isolated-ai-iframe"
            allow="microphone"
          ></iframe>
        </div>
        <div v-else class="no-chat">
          <el-empty description="AI chat not available" />
        </div>
      </div>
    </el-dialog>

    <!-- 🆕 Developer Test AI Dialog -->
    <el-dialog
      v-model="devAIChatVisible"
      title="Developer Test AI Chat"
      width="95%"
      class="dev-ai-chat-dialog"
      @close="cleanupDevAIChat"
    >
      <div class="dev-ai-chat-container">
        <div class="dev-chat-header">
          <el-alert
            title="Development Testing Mode"
            type="warning"
            :closable="false"
            show-icon
          >
            This is using hardcoded script for testing purposes. Changes here do not affect your production AI agent.
          </el-alert>
        </div>
        
        <div v-if="devAIAgent?.external_script_code" class="dev-chat-content">
          <div ref="devAIChatDiv" class="dev-ai-chat-wrapper"></div>
        </div>
        <div v-else class="no-dev-chat">
          <el-empty description="Development AI not available" />
        </div>
      </div>
    </el-dialog>
  </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { 
  User, Location, Link, Calendar, Plus, Clock, ChatDotRound, Setting, Tools
} from '@element-plus/icons-vue'
import { useUserStore } from '@/stores/user'
import { getFileUrl, formatDate } from '@/utils'
import { getUser, getUserPosts } from '@/api/users'
import { checkFriendStatus, sendFriendRequest } from '@/api/friends'
import { createOrGetConversation } from '@/api/messages'
import { getUserAgent } from '@/api/ai'
import PostList from '@/components/post/PostList.vue'

const route = useRoute()
const router = useRouter()
const userStore = useUserStore()

const user = ref(null)
const userPosts = ref([])
const friendStatus = ref('none')
const aiAgent = ref(null)
const devAIAgent = ref(null)
const loading = ref(false)
const postsLoading = ref(false)
const actionLoading = ref(false)
const aiLoading = ref(false)
const devAILoading = ref(false)
const aiChatVisible = ref(false)
const devAIChatVisible = ref(false)
const aiChatIframe = ref()
const devAIChatDiv = ref()
const aiSandboxUrl = ref('')

const isCurrentUser = computed(() => {
  return user.value && userStore.userId === user.value.id
})

// 检查是否为Chris_Liu（用户ID = 3，用户名 = 'Chris_Liu'）
const isChrisLiu = computed(() => {
  return user.value && (user.value.id === 3 || user.value.username === 'Chris_Liu')
})

// 创建隔离的沙箱URL
const createAISandboxUrl = (aiCode) => {
  console.log('Creating AI sandbox URL for user profile:', aiCode.substring(0, 100) + '...')
  
  if (aiCode.includes('<iframe')) {
    const srcMatch = aiCode.match(/src="([^"]*)"/)
    if (srcMatch) {
      console.log('Extracted iframe src for user profile:', srcMatch[1])
      return srcMatch[1]
    }
  } else if (aiCode.startsWith('http')) {
    console.log('Using direct URL for user profile:', aiCode)
    return aiCode
  }
  
  console.warn('Unknown AI code format in user profile')
  return ''
}

const loadUserProfile = async () => {
  loading.value = true
  try {
    const userId = route.params.id
    const response = await getUser(userId)
    user.value = response.data
    
    // 如果不是当前用户，检查好友状态和AI代理
    if (!isCurrentUser.value && userStore.isLoggedIn) {
      await loadFriendStatus()
      await loadAIAgent()
    }
  } catch (error) {
    console.error('Failed to load user profile:', error)
    ElMessage.error('Failed to load user profile')
  } finally {
    loading.value = false
  }
}

const loadUserPosts = async () => {
  postsLoading.value = true
  try {
    const userId = route.params.id
    const response = await getUserPosts(userId)
    userPosts.value = response.data.posts || []
  } catch (error) {
    console.error('Failed to load user posts:', error)
    ElMessage.error('Failed to load user posts')
  } finally {
    postsLoading.value = false
  }
}

const loadFriendStatus = async () => {
  try {
    const response = await checkFriendStatus(user.value.id)
    friendStatus.value = response.data.status
  } catch (error) {
    console.error('Failed to check friend status:', error)
    friendStatus.value = 'none'
  }
}

const loadAIAgent = async () => {
  try {
    const response = await getUserAgent(user.value.id)
    aiAgent.value = response.data
    console.log('AI Agent loaded for user profile:', aiAgent.value)
  } catch (error) {
    console.error('Failed to load AI agent:', error)
    aiAgent.value = null
  }
}

const handleSendFriendRequest = async () => {
  actionLoading.value = true
  try {
    await sendFriendRequest({ userId: user.value.id })
    ElMessage.success('Friend request sent successfully')
    friendStatus.value = 'pending'
  } catch (error) {
    console.error('Failed to send friend request:', error)
    ElMessage.error(error.response?.data?.message || 'Failed to send friend request')
  } finally {
    actionLoading.value = false
  }
}

const handleStartConversation = async () => {
  actionLoading.value = true
  try {
    const response = await createOrGetConversation(user.value.id)
    const conversationId = response.data.conversation.id
    router.push(`/messages/${conversationId}`)
  } catch (error) {
    console.error('Failed to start conversation:', error)
    ElMessage.error('Failed to start conversation')
  } finally {
    actionLoading.value = false
  }
}

// 普通AI对话
const chatWithAI = async () => {
  if (!aiAgent.value || !aiAgent.value.external_script_code) {
    ElMessage.warning('AI chat is not available')
    return
  }

  console.log('=== chatWithAI called (User Profile) ===')
  console.log('AI Agent:', aiAgent.value)

  aiLoading.value = true
  
  try {
    // 创建隔离的沙箱URL
    const url = createAISandboxUrl(aiAgent.value.external_script_code)
    if (!url) {
      ElMessage.error('Cannot create sandbox URL for AI chat')
      return
    }
    
    aiSandboxUrl.value = url
    aiChatVisible.value = true
    
    console.log('Opening AI chat in isolated environment:', url)
    ElMessage.success('AI chat loaded successfully')
    
  } catch (error) {
    console.error('Failed to open AI chat:', error)
    ElMessage.error('Failed to load AI chat interface')
  } finally {
    aiLoading.value = false
  }
}

// 🆕 开发者测试AI对话
const chatWithDevAI = async () => {
  console.log('=== chatWithDevAI called ===')
  console.log('Current user:', userStore.userId)
  console.log('Target user:', user.value?.id)
  
  devAILoading.value = true
  
  try {
    // 获取硬编码的开发者测试AI代理
    const response = await getDevTestAgent(user.value.id)
    devAIAgent.value = response.data
    
    console.log('Dev AI Agent loaded:', devAIAgent.value)
    
    if (!devAIAgent.value?.external_script_code) {
      ElMessage.error('Development AI script not available')
      return
    }
    
    devAIChatVisible.value = true
    
    // 等待对话框打开
    await new Promise(resolve => setTimeout(resolve, 100))
    
    if (devAIChatDiv.value) {
      devAIChatDiv.value.innerHTML = ''
      
      // 创建临时容器来解析HTML
      const tempDiv = document.createElement('div')
      tempDiv.innerHTML = devAIAgent.value.external_script_code.trim()
      
      // 查找script元素
      const scriptElement = tempDiv.querySelector('script')
      
      if (scriptElement) {
        console.log('Found script element for dev AI chat')
        
        // 创建新的script元素
        const newScript = document.createElement('script')
        
        // 复制所有属性
        Array.from(scriptElement.attributes).forEach(attr => {
          newScript.setAttribute(attr.name, attr.value)
        })
        
        // 如果有内联代码，也复制过来
        if (scriptElement.textContent) {
          newScript.textContent = scriptElement.textContent
        }
        
        console.log('Adding dev script to chat container')
        
        // 添加到容器
        devAIChatDiv.value.appendChild(newScript)
        
        console.log('Dev AI chat script added successfully')
        ElMessage.success('Developer AI chat loaded successfully')
        
      } else {
        console.error('No script element found in dev AI agent code')
        ElMessage.error('Invalid development AI chat configuration')
      }
    }
    
  } catch (error) {
    console.error('Failed to load development AI chat:', error)
    ElMessage.error('Failed to load development AI chat interface')
  } finally {
    devAILoading.value = false
  }
}

const cleanupAIChat = () => {
  console.log('AI chat cleaned up for user profile')
  aiSandboxUrl.value = ''
}

const cleanupDevAIChat = () => {
  console.log('Dev AI chat cleaned up')
  if (devAIChatDiv.value) {
    devAIChatDiv.value.innerHTML = ''
  }
  devAIAgent.value = null
}

onMounted(() => {
  loadUserProfile()
  loadUserPosts()
})
</script>

<style lang="scss" scoped>
.user-profile-page {
  max-width: 1000px;
  margin: 0 auto;
}

.loading-container,
.error-container {
  padding: 40px;
  text-align: center;
}

.profile-content {
  background: white;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
  margin-bottom: 20px;
}

.cover-section {
  position: relative;
  height: 200px;
  overflow: hidden;
  
  .cover-image {
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    position: relative;
  }
  
  .cover-overlay {
    position: absolute;
    bottom: 0;
    left: 0;
    right: 0;
    height: 60px;
    background: linear-gradient(transparent, rgba(0, 0, 0, 0.3));
  }
}

.profile-header {
  padding: 0 30px 30px;
  position: relative;
  
  .avatar-section {
    display: flex;
    justify-content: center;
    margin-top: -60px;
    margin-bottom: 20px;
    
    .user-avatar {
      border: 4px solid white;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }
  }
  
  .user-info {
    text-align: center;
    margin-bottom: 20px;
    
    .username {
      font-size: 28px;
      font-weight: 700;
      color: #303133;
      margin: 0 0 10px 0;
    }
    
    .bio {
      font-size: 16px;
      color: #606266;
      margin: 0 0 20px 0;
      line-height: 1.6;
    }
    
    .user-details {
      display: flex;
      justify-content: center;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 20px;
      
      .detail-item {
        display: flex;
        align-items: center;
        gap: 6px;
        color: #909399;
        font-size: 14px;
        
        .el-icon {
          font-size: 16px;
        }
        
        a {
          color: #409EFF;
          text-decoration: none;
          
          &:hover {
            text-decoration: underline;
          }
        }
      }
    }
    
    .user-stats {
      display: flex;
      justify-content: center;
      gap: 40px;
      
      .stat-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        
        .stat-number {
          font-size: 20px;
          font-weight: 700;
          color: #303133;
        }
        
        .stat-label {
          font-size: 12px;
          color: #909399;
          text-transform: uppercase;
          letter-spacing: 0.5px;
        }
      }
    }
  }
  
  .profile-actions {
    display: flex;
    justify-content: center;
    gap: 12px;
    flex-wrap: wrap;
    
    .el-button .el-icon {
      margin-right: 6px;
    }
  }

  // 🆕 开发者测试区域样式
  .dev-test-actions {
    margin-top: 20px;
    padding-top: 15px;
    
    .dev-buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
      
      .el-button {
        .el-icon {
          margin-right: 6px;
        }
      }
    }
  }
}

.posts-section {
  background: white;
  border-radius: 12px;
  padding: 20px;
  box-shadow: 0 2px 12px rgba(0, 0, 0, 0.1);
  
  .section-header {
    margin-bottom: 20px;
    
    h2 {
      margin: 0;
      color: #303133;
      font-size: 20px;
    }
  }
  
  .empty-posts {
    padding: 40px;
    text-align: center;
  }
}

.ai-chat-dialog {
  .ai-chat-container {
    height: 600px;
    border: 1px solid #dcdfe6;
    border-radius: 8px;
    overflow: hidden;
    
    .chat-iframe-sandbox {
      height: 100%;
      width: 100%;
      
      .isolated-ai-iframe {
        width: 100%;
        height: 100%;
        border: none;
      }
    }
    
    .no-chat {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 100%;
    }
  }
}

// 🆕 开发者AI对话框样式
.dev-ai-chat-dialog {
  .dev-ai-chat-container {
    height: 650px;
    
    .dev-chat-header {
      margin-bottom: 15px;
    }
    
    .dev-chat-content {
      height: calc(100% - 60px);
      border: 2px solid #e6a23c;
      border-radius: 8px;
      overflow: hidden;
      
      .dev-ai-chat-wrapper {
        height: 100%;
        width: 100%;
        background: #fdf6ec;
      }
    }
    
    .no-dev-chat {
      display: flex;
      align-items: center;
      justify-content: center;
      height: 400px;
      border: 2px dashed #e6a23c;
      border-radius: 8px;
    }
  }
}

@media (max-width: 768px) {
  .profile-header {
    padding: 0 20px 20px;
    
    .user-info {
      .username {
        font-size: 24px;
      }
      
      .user-details {
        flex-direction: column;
        gap: 10px;
      }
      
      .user-stats {
        gap: 20px;
      }
    }
    
    .profile-actions {
      .el-button {
        flex: 1;
        min-width: 120px;
      }
    }

    .dev-test-actions {
      .dev-buttons {
        flex-direction: column;
        
        .el-button {
          width: 100%;
        }
      }
    }
  }
  
  .cover-section {
    height: 150px;
  }
  
  .posts-section {
    padding: 15px;
  }
  
  .ai-chat-dialog,
  .dev-ai-chat-dialog {
    .ai-chat-container,
    .dev-ai-chat-container {
      height: 400px;
    }
  }
}
</style>
