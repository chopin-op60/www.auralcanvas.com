<template>
  <div class="profile-page">
    <!-- 用户信息卡片 -->
    <div class="profile-card">
      <div class="profile-header">
        <!-- 优化后的封面图 -->
        <div class="cover-image" :style="coverImageStyle">
          <div class="cover-gradient-overlay"></div>
          <div class="cover-bottom-overlay"></div>
        </div>
        
        <!-- 用户信息 -->
        <div class="user-info">
          <div class="avatar-section">
            <el-avatar :size="120" :src="avatarUrl" class="user-avatar">
              <el-icon><User /></el-icon>
            </el-avatar>
          </div>
          
          <div class="user-details">
            <h1 class="username">{{ userInfo.username }}</h1>
            <p v-if="userInfo.bio" class="bio">{{ userInfo.bio }}</p>
            <p v-if="userInfo.location" class="location">
              <el-icon><Location /></el-icon>
              {{ userInfo.location }}
            </p>
            
            <div class="stats">
              <div class="stat-item">
                <span class="stat-number">{{ userInfo.posts_count || 0 }}</span>
                <span class="stat-label">Posts</span>
              </div>
              <div class="stat-item">
                <span class="stat-number">{{ userInfo.followers_count || 0 }}</span>
                <span class="stat-label">Followers</span>
              </div>
              <div class="stat-item">
                <span class="stat-number">{{ userInfo.following_count || 0 }}</span>
                <span class="stat-label">Following</span>
              </div>
            </div>
            
            <div class="action-buttons">
              <el-button type="primary" @click="$router.push('/profile/edit')">
                <el-icon><Edit /></el-icon>
                Edit Profile
              </el-button>
              <el-button @click="$router.push('/ai')">
                <el-icon><Cpu /></el-icon>
                AI Agent
              </el-button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 帖子内容区域 -->
    <div class="posts-section">
      <div class="section-header">
        <h2>My Posts</h2>
        <el-button type="primary" @click="$router.push('/post/create')">
          <el-icon><Plus /></el-icon>
          Create Post
        </el-button>
      </div>
      
      <!-- 使用和首页相同的PostList组件 -->
      <PostList 
        :posts="posts" 
        :loading="loading" 
        @post-deleted="handlePostDeleted"
        @post-updated="handlePostUpdated"
      />
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed } from 'vue'
import { useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { useUserStore } from '@/stores/user'
import { getFileUrl } from '@/utils'
import { getPostList } from '@/api/posts'
import { getUserProfile } from '@/api/auth'
import PostList from '@/components/post/PostList.vue'
import { User, Location, Edit, Cpu, Plus } from '@element-plus/icons-vue'

const router = useRouter()
const userStore = useUserStore()
const userInfo = ref({})
const posts = ref([])
const loading = ref(false)

// 计算头像URL
const avatarUrl = computed(() => {
  return userInfo.value.avatar ? getFileUrl(userInfo.value.avatar) : null
})

// 计算封面图样式 - 优化右侧布局和渐变
const coverImageStyle = computed(() => {
  if (userInfo.value.cover_image) {
    return {
      backgroundImage: `url(${getFileUrl(userInfo.value.cover_image)})`,
      backgroundSize: 'cover',
      backgroundPosition: 'center right', // 图片靠右显示
      backgroundRepeat: 'no-repeat'
    }
  }
  return {
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
  }
})

// 加载用户信息
const loadUserInfo = async () => {
  try {
    const response = await getUserProfile()
    if (response.success) {
      userInfo.value = response.data
    }
  } catch (error) {
    console.error('Failed to load user info:', error)
    ElMessage.error('Failed to load profile information')
  }
}

// 加载用户帖子
const loadUserPosts = async () => {
  loading.value = true
  try {
    const response = await getPostList({
      user_id: userStore.userId,
      page: 1,
      limit: 30
    })
    
    if (response.success && response.data) {
      posts.value = response.data.posts || []
    } else {
      posts.value = []
    }
  } catch (error) {
    console.error('Failed to load posts:', error)
    ElMessage.error('Failed to load posts')
    posts.value = []
  } finally {
    loading.value = false
  }
}

// 处理帖子删除
const handlePostDeleted = (deletedPostId) => {
  posts.value = posts.value.filter(post => post.id !== deletedPostId)
  
  // 更新帖子计数
  if (userInfo.value.posts_count > 0) {
    userInfo.value.posts_count--
  }
  
  ElMessage.success('Post deleted successfully')
}

// 处理帖子更新
const handlePostUpdated = (updateData) => {
  const postIndex = posts.value.findIndex(post => post.id === updateData.id)
  if (postIndex > -1) {
    Object.assign(posts.value[postIndex], updateData)
  }
}

onMounted(() => {
  Promise.all([
    loadUserInfo(),
    loadUserPosts()
  ])
})
</script>

<style lang="scss" scoped>
.profile-page {
  width: 100%;
  min-height: 100vh;
  background: #f8fafb;
  padding: 20px;
}

.profile-card {
  background: white;
  border-radius: 24px;
  overflow: hidden;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
  margin-bottom: 30px;
  border: 1px solid rgba(0, 0, 0, 0.04);
}

.profile-header {
  position: relative;
  
  .cover-image {
    height: 200px;
    position: relative;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    
    // 🎨 左侧白色渐变遮罩（当有自定义封面图时）
    .cover-gradient-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 60%; // 覆盖左侧60%区域
      height: 100%;
      background: linear-gradient(
        to right,
        rgba(255, 255, 255, 0.95) 0%,    // 左边接近纯白
        rgba(255, 255, 255, 0.8) 30%,   // 30%处开始透明
        rgba(255, 255, 255, 0.4) 60%,   // 60%处半透明
        rgba(255, 255, 255, 0) 100%     // 右边完全透明
      );
      pointer-events: none;
    }
    
    // 底部渐变（保持原有效果）
    .cover-bottom-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 80px;
      background: linear-gradient(
        transparent 0%,
        rgba(0, 0, 0, 0.1) 50%,
        rgba(0, 0, 0, 0.3) 100%
      );
      pointer-events: none;
    }
    
    // 如果没有自定义封面图，隐藏左侧渐变
    &:not([style*="background-image"]) .cover-gradient-overlay {
      display: none;
    }
  }
  
  .user-info {
    padding: 0 40px 40px;
    position: relative;
    background: white;
    
    .avatar-section {
      position: relative;
      margin-top: -60px;
      margin-bottom: 20px;
      z-index: 10; // 确保头像在渐变层之上
      
      .user-avatar {
        border: 4px solid white;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        background: white; // 确保头像背景为白色
      }
    }
    
    .user-details {
      .username {
        font-size: 2rem;
        font-weight: 800;
        color: #111827;
        margin-bottom: 8px;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1); // 轻微阴影增强可读性
      }
      
      .bio {
        font-size: 1.1rem;
        color: #4b5563;
        line-height: 1.6;
        margin-bottom: 12px;
      }
      
      .location {
        display: flex;
        align-items: center;
        gap: 6px;
        color: #6b7280;
        margin-bottom: 24px;
        
        .el-icon {
          font-size: 16px;
        }
      }
      
      .stats {
        display: flex;
        gap: 40px;
        margin-bottom: 32px;
        
        .stat-item {
          text-align: center;
          
          .stat-number {
            display: block;
            font-size: 1.8rem;
            font-weight: 800;
            color: #111827;
            line-height: 1.2;
          }
          
          .stat-label {
            font-size: 0.9rem;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.05em;
          }
        }
      }
      
      .action-buttons {
        display: flex;
        gap: 16px;
        
        .el-button {
          border-radius: 12px;
          padding: 12px 24px;
          font-weight: 600;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          transition: all 0.3s ease;
          
          &:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          }
        }
      }
    }
  }
}

.posts-section {
  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 30px;
    
    h2 {
      font-size: 1.8rem;
      font-weight: 800;
      color: #111827;
      margin: 0;
    }
    
    .el-button {
      border-radius: 12px;
      padding: 12px 20px;
      font-weight: 600;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
      
      &:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(64, 158, 255, 0.3);
      }
    }
  }
}

// 响应式设计
@media (max-width: 768px) {
  .profile-page {
    padding: 15px;
  }
  
  .profile-card {
    border-radius: 20px;
    margin-bottom: 24px;
  }
  
  .profile-header {
    .cover-image {
      height: 150px;
      
      // 移动端调整渐变区域
      .cover-gradient-overlay {
        width: 70%; // 移动端覆盖更多区域
        background: linear-gradient(
          to right,
          rgba(255, 255, 255, 0.9) 0%,
          rgba(255, 255, 255, 0.6) 40%,
          rgba(255, 255, 255, 0.2) 70%,
          rgba(255, 255, 255, 0) 100%
        );
      }
    }
    
    .user-info {
      padding: 0 24px 32px;
      
      .avatar-section {
        margin-top: -50px;
        
        .user-avatar {
          width: 100px !important;
          height: 100px !important;
          border-width: 3px;
        }
      }
      
      .user-details {
        .username {
          font-size: 1.6rem;
        }
        
        .stats {
          gap: 24px;
          margin-bottom: 24px;
          
          .stat-item .stat-number {
            font-size: 1.5rem;
          }
        }
        
        .action-buttons {
          flex-direction: column;
          
          .el-button {
            width: 100%;
          }
        }
      }
    }
  }
  
  .posts-section .section-header {
    flex-direction: column;
    gap: 16px;
    align-items: stretch;
    margin-bottom: 24px;
    
    h2 {
      font-size: 1.5rem;
      text-align: center;
    }
  }
}

// 深色模式适配
@media (prefers-color-scheme: dark) {
  .profile-page {
    background: #0f1419;
  }
  
  .profile-card {
    background: #1f2937;
    border: 1px solid rgba(255, 255, 255, 0.08);
    
    .user-info {
      background: #1f2937;
      
      .user-details {
        .username {
          color: #f9fafb;
        }
        
        .bio {
          color: #d1d5db;
        }
        
        .location {
          color: #9ca3af;
        }
        
        .stats .stat-item .stat-number {
          color: #f9fafb;
        }
      }
    }
  }
  
  .posts-section .section-header h2 {
    color: #f9fafb;
  }
  
  // 深色模式下调整渐变
  .profile-header .cover-image .cover-gradient-overlay {
    background: linear-gradient(
      to right,
      rgba(31, 41, 55, 0.95) 0%,    // 深色模式背景色
      rgba(31, 41, 55, 0.8) 30%,
      rgba(31, 41, 55, 0.4) 60%,
      rgba(31, 41, 55, 0) 100%
    ) !important;
  }
}
</style>
