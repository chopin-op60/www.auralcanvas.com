<template>
  <div class="user-page">
    <!-- 用户信息卡片 -->
    <div class="profile-card">
      <div class="profile-header">
        <!-- 优化后的封面图 -->
        <div class="cover-image" :style="coverImageStyle">
          <div class="cover-gradient-overlay"></div>
          <div class="cover-bottom-overlay"></div>
        </div>
        
        <!-- 用户信息 -->
        <div class="user-info">
          <div class="avatar-section">
            <el-avatar :size="120" :src="avatarUrl" class="user-avatar">
              <el-icon><User /></el-icon>
            </el-avatar>
          </div>
          
          <div class="user-details">
            <h1 class="username">{{ userProfile.username }}</h1>
            <p v-if="userProfile.bio" class="bio">{{ userProfile.bio }}</p>
            <p v-if="userProfile.location" class="location">
              <el-icon><Location /></el-icon>
              {{ userProfile.location }}
            </p>
            
            <div class="stats">
              <div class="stat-item">
                <span class="stat-number">{{ userProfile.posts_count || 0 }}</span>
                <span class="stat-label">Posts</span>
              </div>
              <div class="stat-item">
                <span class="stat-number">{{ userProfile.followers_count || 0 }}</span>
                <span class="stat-label">Followers</span>
              </div>
              <div class="stat-item">
                <span class="stat-number">{{ userProfile.following_count || 0 }}</span>
                <span class="stat-label">Following</span>
              </div>
            </div>
            
            <!-- 只对非本人显示操作按钮 -->
            <div class="action-buttons" v-if="!isOwnProfile">
              <el-button 
                :type="friendshipStatus === 'friends' ? 'default' : 'primary'"
                @click="handleFriendAction"
                :loading="friendActionLoading"
              >
                <el-icon v-if="friendshipStatus === 'none'"><UserFilled /></el-icon>
                <el-icon v-else-if="friendshipStatus === 'pending'"><Clock /></el-icon>
                <el-icon v-else-if="friendshipStatus === 'friends'"><Close /></el-icon>
                {{ getFriendButtonText() }}
              </el-button>
              
              <el-button @click="handleMessage">
                <el-icon><ChatDotRound /></el-icon>
                Message
              </el-button>
              
              <!-- AI代理访问按钮 -->
              <el-button v-if="hasActiveAI" @click="handleAIChat" type="success">
                <el-icon><Cpu /></el-icon>
                Chat with AI
              </el-button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 帖子内容区域 -->
    <div class="posts-section">
      <div class="section-header">
        <h2>{{ userProfile.username }}'s Posts</h2>
      </div>
      
      <!-- 使用和首页相同的PostList组件 -->
      <PostList 
        :posts="posts" 
        :loading="loading" 
        @post-deleted="handlePostDeleted"
        @post-updated="handlePostUpdated"
      />
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed, watch } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { ElMessage, ElMessageBox } from 'element-plus'
import { useUserStore } from '@/stores/user'
import { getFileUrl } from '@/utils'
import { getPostList } from '@/api/posts'
import { getUserById } from '@/api/users'
import { sendFriendRequest, getFriendshipStatus, removeFriend } from '@/api/friends'
import { createOrGetConversation } from '@/api/messages'
import { getPublicAgent } from '@/api/ai'
import PostList from '@/components/post/PostList.vue'
import { 
  User, Location, UserFilled, Close, Clock, 
  ChatDotRound, Cpu 
} from '@element-plus/icons-vue'

const route = useRoute()
const router = useRouter()
const userStore = useUserStore()

const userProfile = ref({})
const posts = ref([])
const loading = ref(false)
const friendActionLoading = ref(false)
const friendshipStatus = ref('none') // none, pending, friends
const hasActiveAI = ref(false)

// 是否为本人主页
const isOwnProfile = computed(() => {
  const currentUserId = parseInt(userStore.userId)
  const profileUserId = parseInt(userProfile.value.id)
  return currentUserId === profileUserId
})

// 计算头像URL
const avatarUrl = computed(() => {
  return userProfile.value.avatar ? getFileUrl(userProfile.value.avatar) : null
})

// 计算封面图样式 - 优化右侧布局和渐变
const coverImageStyle = computed(() => {
  if (userProfile.value.cover_image) {
    return {
      backgroundImage: `url(${getFileUrl(userProfile.value.cover_image)})`,
      backgroundSize: 'cover',
      backgroundPosition: 'center right', // 图片靠右显示
      backgroundRepeat: 'no-repeat'
    }
  }
  return {
    background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)'
  }
})

// 好友按钮文字
const getFriendButtonText = () => {
  switch (friendshipStatus.value) {
    case 'pending': return 'Request Sent'
    case 'friends': return 'Remove Friend'
    default: return 'Add Friend'
  }
}

// 加载用户信息
const loadUserProfile = async (userId) => {
  try {
    const response = await getUserById(userId)
    if (response.success) {
      userProfile.value = response.data
    } else {
      throw new Error('User not found')
    }
  } catch (error) {
    console.error('Failed to load user profile:', error)
    ElMessage.error('Failed to load user profile')
    router.push('/home')
  }
}

// 加载用户帖子
const loadUserPosts = async (userId) => {
  loading.value = true
  try {
    const response = await getPostList({
      user_id: userId,
      page: 1,
      limit: 30
    })
    
    if (response.success && response.data) {
      posts.value = response.data.posts || []
    } else {
      posts.value = []
    }
  } catch (error) {
    console.error('Failed to load posts:', error)
    ElMessage.error('Failed to load posts')
    posts.value = []
  } finally {
    loading.value = false
  }
}

// 加载好友关系状态
const loadFriendshipStatus = async (userId) => {
  if (isOwnProfile.value) return
  
  try {
    const response = await getFriendshipStatus(userId)
    if (response.success) {
      friendshipStatus.value = response.data.status
    }
  } catch (error) {
    console.error('Failed to load friendship status:', error)
  }
}

// 检查AI代理状态
const checkAIAgent = async (userId) => {
  try {
    const response = await getPublicAgent(userId)
    hasActiveAI.value = response.success && response.data
  } catch (error) {
    hasActiveAI.value = false
  }
}

// 处理好友操作
const handleFriendAction = async () => {
  if (!userStore.isLoggedIn) {
    ElMessage.warning('Please login first')
    return
  }

  friendActionLoading.value = true
  
  try {
    if (friendshipStatus.value === 'friends') {
      // 移除好友
      await ElMessageBox.confirm(
        'Are you sure you want to remove this friend?',
        'Remove Friend',
        {
          confirmButtonText: 'Remove',
          cancelButtonText: 'Cancel',
          type: 'warning'
        }
      )
      
      await removeFriend(userProfile.value.id)
      friendshipStatus.value = 'none'
      ElMessage.success('Friend removed successfully')
      
    } else if (friendshipStatus.value === 'none') {
      // 发送好友请求
      await sendFriendRequest(userProfile.value.id)
      friendshipStatus.value = 'pending'
      ElMessage.success('Friend request sent successfully')
    }
  } catch (error) {
    if (error !== 'cancel') {
      console.error('Friend action failed:', error)
      ElMessage.error('Operation failed, please try again')
    }
  } finally {
    friendActionLoading.value = false
  }
}

// 处理发送消息
const handleMessage = async () => {
  if (!userStore.isLoggedIn) {
    ElMessage.warning('Please login first')
    return
  }

  try {
    const response = await createOrGetConversation(userProfile.value.id)
    if (response.success) {
      router.push(`/messages?conversation=${response.data.conversation.id}`)
    }
  } catch (error) {
    console.error('Failed to create conversation:', error)
    ElMessage.error('Failed to create conversation')
  }
}

// 处理AI聊天
const handleAIChat = () => {
  router.push(`/ai/chat/${userProfile.value.id}`)
}

// 处理帖子删除
const handlePostDeleted = (deletedPostId) => {
  posts.value = posts.value.filter(post => post.id !== deletedPostId)
}

// 处理帖子更新
const handlePostUpdated = (updateData) => {
  const postIndex = posts.value.findIndex(post => post.id === updateData.id)
  if (postIndex > -1) {
    Object.assign(posts.value[postIndex], updateData)
  }
}

// 监听路由变化
watch(
  () => route.params.id,
  async (newUserId) => {
    if (newUserId) {
      await Promise.all([
        loadUserProfile(newUserId),
        loadUserPosts(newUserId),
        loadFriendshipStatus(newUserId),
        checkAIAgent(newUserId)
      ])
    }
  },
  { immediate: true }
)

onMounted(async () => {
  const userId = route.params.id
  if (userId) {
    await Promise.all([
      loadUserProfile(userId),
      loadUserPosts(userId),
      loadFriendshipStatus(userId),
      checkAIAgent(userId)
    ])
  }
})
</script>

<style lang="scss" scoped>
// 使用与个人主页完全相同的样式
.user-page {
  width: 100%;
  min-height: 100vh;
  background: #f8fafb;
  padding: 20px;
}

.profile-card {
  background: white;
  border-radius: 24px;
  overflow: hidden;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.08);
  margin-bottom: 30px;
  border: 1px solid rgba(0, 0, 0, 0.04);
}

.profile-header {
  position: relative;
  
  .cover-image {
    height: 200px;
    position: relative;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    
    // 🎨 左侧白色渐变遮罩（当有自定义封面图时）
    .cover-gradient-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 60%; // 覆盖左侧60%区域
      height: 100%;
      background: linear-gradient(
        to right,
        rgba(255, 255, 255, 0.95) 0%,    // 左边接近纯白
        rgba(255, 255, 255, 0.8) 30%,   // 30%处开始透明
        rgba(255, 255, 255, 0.4) 60%,   // 60%处半透明
        rgba(255, 255, 255, 0) 100%     // 右边完全透明
      );
      pointer-events: none;
    }
    
    // 底部渐变（保持原有效果）
    .cover-bottom-overlay {
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 80px;
      background: linear-gradient(
        transparent 0%,
        rgba(0, 0, 0, 0.1) 50%,
        rgba(0, 0, 0, 0.3) 100%
      );
      pointer-events: none;
    }
    
    // 如果没有自定义封面图，隐藏左侧渐变
    &:not([style*="background-image"]) .cover-gradient-overlay {
      display: none;
    }
  }
  
  .user-info {
    padding: 0 40px 40px;
    position: relative;
    background: white;
    
    .avatar-section {
      position: relative;
      margin-top: -60px;
      margin-bottom: 20px;
      z-index: 10;
      
      .user-avatar {
        border: 4px solid white;
        box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
        background: white;
      }
    }
    
    .user-details {
      .username {
        font-size: 2rem;
        font-weight: 800;
        color: #111827;
        margin-bottom: 8px;
        text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      }
      
      .bio {
        font-size: 1.1rem;
        color: #4b5563;
        line-height: 1.6;
        margin-bottom: 12px;
      }
      
      .location {
        display: flex;
        align-items: center;
        gap: 6px;
        color: #6b7280;
        margin-bottom: 24px;
        
        .el-icon {
          font-size: 16px;
        }
      }
      
      .stats {
        display: flex;
        gap: 40px;
        margin-bottom: 32px;
        
        .stat-item {
          text-align: center;
          
          .stat-number {
            display: block;
            font-size: 1.8rem;
            font-weight: 800;
            color: #111827;
            line-height: 1.2;
          }
          
          .stat-label {
            font-size: 0.9rem;
            color: #6b7280;
            text-transform: uppercase;
            letter-spacing: 0.05em;
          }
        }
      }
      
      .action-buttons {
        display: flex;
        gap: 16px;
        flex-wrap: wrap;
        
        .el-button {
          border-radius: 12px;
          padding: 12px 24px;
          font-weight: 600;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
          transition: all 0.3s ease;
          
          &:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
          }
        }
      }
    }
  }
}

.posts-section {
  .section-header {
    margin-bottom: 30px;
    
    h2 {
      font-size: 1.8rem;
      font-weight: 800;
      color: #111827;
      margin: 0;
    }
  }
}

// 响应式设计
@media (max-width: 768px) {
  .user-page {
    padding: 15px;
  }
  
  .profile-card {
    border-radius: 20px;
    margin-bottom: 24px;
  }
  
  .profile-header {
    .cover-image {
      height: 150px;
      
      // 移动端调整渐变区域
      .cover-gradient-overlay {
        width: 70%;
        background: linear-gradient(
          to right,
          rgba(255, 255, 255, 0.9) 0%,
          rgba(255, 255, 255, 0.6) 40%,
          rgba(255, 255, 255, 0.2) 70%,
          rgba(255, 255, 255, 0) 100%
        );
      }
    }
    
    .user-info {
      padding: 0 24px 32px;
      
      .avatar-section {
        margin-top: -50px;
        
        .user-avatar {
          width: 100px !important;
          height: 100px !important;
          border-width: 3px;
        }
      }
      
      .user-details {
        .username {
          font-size: 1.6rem;
        }
        
        .stats {
          gap: 24px;
          margin-bottom: 24px;
          
          .stat-item .stat-number {
            font-size: 1.5rem;
          }
        }
        
        .action-buttons {
          justify-content: center;
          
          .el-button {
            flex: 1;
            min-width: 120px;
          }
        }
      }
    }
  }
  
  .posts-section .section-header {
    margin-bottom: 24px;
    text-align: center;
    
    h2 {
      font-size: 1.5rem;
    }
  }
}

// 深色模式适配
@media (prefers-color-scheme: dark) {
  .user-page {
    background: #0f1419;
  }
  
  .profile-card {
    background: #1f2937;
    border: 1px solid rgba(255, 255, 255, 0.08);
    
    .user-info {
      background: #1f2937;
      
      .user-details {
        .username {
          color: #f9fafb;
        }
        
        .bio {
          color: #d1d5db;
        }
        
        .location {
          color: #9ca3af;
        }
        
        .stats .stat-item .stat-number {
          color: #f9fafb;
        }
      }
    }
  }
  
  .posts-section .section-header h2 {
    color: #f9fafb;
  }
  
  // 深色模式下调整渐变
  .profile-header .cover-image .cover-gradient-overlay {
    background: linear-gradient(
      to right,
      rgba(31, 41, 55, 0.95) 0%,
      rgba(31, 41, 55, 0.8) 30%,
      rgba(31, 41, 55, 0.4) 60%,
      rgba(31, 41, 55, 0) 100%
    ) !important;
  }
}
</style>
