<template>
  <div class="home-page">
    <div class="welcome-banner">
      <h1>Welcome to AuralCanvas</h1>
      <p>Visualize Music. Share Your World.</p>
    </div>
    
    <!-- üîß Êñ∞Â¢ûÔºöÊêúÁ¥¢Ê°ÜÁßªÂà∞banner‰∏ãÊñπ -->
    <div class="search-section">
      <el-input
        v-model="searchKeyword"
        placeholder="Search posts, users, or topics..."
        class="search-input"
        size="large"
        @keyup.enter="handleSearch"
        clearable
      >
        <template #prefix>
          <el-icon><Search /></el-icon>
        </template>
        <template #append>
          <el-button @click="handleSearch" :disabled="!searchKeyword.trim()">
            <el-icon><Search /></el-icon>
            Search
          </el-button>
        </template>
      </el-input>
    </div>
    
    <div class="content-tabs">
      <el-tabs v-model="activeTab" @tab-change="handleTabChange">
        <el-tab-pane label="Latest" name="latest">
          <PostList 
            :posts="posts" 
            :loading="loading" 
            @post-deleted="handlePostDeleted"
            @post-updated="handlePostUpdated"
          />
        </el-tab-pane>
        <el-tab-pane label="Trending" name="trending">
          <PostList 
            :posts="posts" 
            :loading="loading" 
            @post-deleted="handlePostDeleted"
            @post-updated="handlePostUpdated"
          />
        </el-tab-pane>
        <el-tab-pane label="Following" name="following" v-if="userStore.isLoggedIn">
          <PostList 
            :posts="posts" 
            :loading="loading" 
            @post-deleted="handlePostDeleted"
            @post-updated="handlePostUpdated"
          />
        </el-tab-pane>
        <el-tab-pane :label="searchTabLabel" name="search" v-if="isSearchMode">
          <div class="search-results-header">
            <h3>Search Results for "{{ currentSearchKeyword }}"</h3>
            <el-button type="text" @click="clearSearch" class="clear-search-btn">
              <el-icon><Close /></el-icon>
              Clear Search
            </el-button>
          </div>
          <PostList 
            :posts="posts" 
            :loading="loading" 
            @post-deleted="handlePostDeleted"
            @post-updated="handlePostUpdated"
          />
        </el-tab-pane>
      </el-tabs>
    </div>
  </div>
</template>

<script setup>
import { ref, onMounted, computed, watch } from 'vue'
import { useRoute, useRouter } from 'vue-router'
import { ElMessage } from 'element-plus'
import { useUserStore } from '@/stores/user'
import PostList from '@/components/post/PostList.vue'
import { getPostList, searchPosts } from '@/api/posts'
import { Close, Search } from '@element-plus/icons-vue'

const route = useRoute()
const router = useRouter()
const userStore = useUserStore()
const activeTab = ref('latest')
const posts = ref([])
const loading = ref(false)
const currentSearchKeyword = ref('')
const searchKeyword = ref('') // Êñ∞Â¢ûÔºöÊêúÁ¥¢Ê°ÜÁªëÂÆö

// Search mode detection
const isSearchMode = computed(() => currentSearchKeyword.value !== '')
const searchTabLabel = computed(() => 
  currentSearchKeyword.value ? `Search: ${currentSearchKeyword.value}` : 'Search'
)

// Watch route changes to handle search from header
watch(
  () => route.query,
  (newQuery) => {
    if (newQuery.tab === 'search' && newQuery.q) {
      currentSearchKeyword.value = newQuery.q
      searchKeyword.value = newQuery.q // ÂêåÊ≠•ÊêúÁ¥¢Ê°Ü
      activeTab.value = 'search'
      handleSearch(newQuery.q)
    } else if (activeTab.value === 'search' && !newQuery.q) {
      clearSearch()
    }
  },
  { immediate: true }
)

// üîß ‰øÆÊîπÔºöÊêúÁ¥¢Â§ÑÁêÜÂáΩÊï∞
const handleSearch = async (keyword) => {
  const searchTerm = keyword || searchKeyword.value?.trim()
  
  if (!searchTerm) {
    ElMessage.warning('Please enter a search keyword')
    return
  }
  
  console.log('Searching for:', searchTerm)
  currentSearchKeyword.value = searchTerm
  activeTab.value = 'search'
  
  // Êõ¥Êñ∞URL
  router.push({
    path: '/home',
    query: { 
      tab: 'search',
      q: searchTerm
    }
  })
  
  loading.value = true
  
  try {
    const params = {
      q: searchTerm,
      page: 1,
      limit: 30
    }
    
    const response = await searchPosts(params)
    console.log('Search API response:', response)
    
    if (response.success && response.data) {
      posts.value = response.data.posts || []
      console.log('Search results:', posts.value.length)
      
      if (posts.value.length === 0) {
        ElMessage.info(`No posts found for "${searchTerm}"`)
      } else {
        ElMessage.success(`Found ${posts.value.length} results for "${searchTerm}"`)
      }
    } else {
      console.warn('Invalid search response format:', response)
      posts.value = []
    }
  } catch (error) {
    console.error('Failed to search posts:', error)
    ElMessage.error('Search failed, please try again')
    posts.value = []
  } finally {
    loading.value = false
  }
}

// Clear search
const clearSearch = () => {
  currentSearchKeyword.value = ''
  searchKeyword.value = '' // Ê∏ÖÁ©∫ÊêúÁ¥¢Ê°Ü
  activeTab.value = 'latest'
  router.push('/home')
  loadPosts('latest')
}

// Switch tabs
const handleTabChange = async (tab) => {
  console.log('Switching to tab:', tab)
  activeTab.value = tab
  
  if (tab === 'search') {
    if (!currentSearchKeyword.value) {
      activeTab.value = 'latest'
      return
    }
    await handleSearch(currentSearchKeyword.value)
  } else {
    await loadPosts(tab)
  }
}

// Load posts list
const loadPosts = async (tab = 'latest') => {
  console.log('Loading posts for tab:', tab)
  loading.value = true
  
  try {
    const params = {
      page: 1,
      limit: 30
    }
    
    switch (tab) {
      case 'trending':
        break
      case 'following':
        break
      case 'latest':
      default:
        break
    }
    
    const response = await getPostList(params)
    console.log('API response:', response)
    
    if (response.success && response.data) {
      posts.value = response.data.posts || []
      console.log('Loaded posts:', posts.value.length)
    } else {
      console.warn('Invalid response format:', response)
      posts.value = []
    }
  } catch (error) {
    console.error('Failed to load posts:', error)
    ElMessage.error('Failed to load posts, please try again')
    posts.value = []
  } finally {
    loading.value = false
  }
}

// Â§ÑÁêÜÂ∏ñÂ≠êÂà†Èô§ÂêéÁöÑÂà∑Êñ∞
const handlePostDeleted = (deletedPostId) => {
  console.log('Home: Post deleted:', deletedPostId)
  
  posts.value = posts.value.filter(post => post.id !== deletedPostId)
  
  ElMessage.success('Post deleted successfully')
  
  if (posts.value.length === 0) {
    if (isSearchMode.value) {
      handleSearch(currentSearchKeyword.value)
    } else {
      loadPosts(activeTab.value)
    }
  }
}

// Â§ÑÁêÜÂ∏ñÂ≠êÊõ¥Êñ∞
const handlePostUpdated = (updateData) => {
  console.log('Home: Post updated:', updateData)
  
  const postIndex = posts.value.findIndex(post => post.id === updateData.id)
  if (postIndex > -1) {
    Object.assign(posts.value[postIndex], updateData)
    console.log('Post state updated in home page')
  }
}

onMounted(() => {
  if (route.query.tab === 'search' && route.query.q) {
    currentSearchKeyword.value = route.query.q
    searchKeyword.value = route.query.q
    activeTab.value = 'search'
    handleSearch(route.query.q)
  } else {
    loadPosts('latest')
  }
})
</script>

<style lang="scss" scoped>
.home-page {
  width: 100%;
  margin: 0;
  padding: 32px;
  min-height: 100vh;
  // üîß ‰øùÊåÅËàíÈÄÇÁöÑÊµÖÁÅ∞Ëâ≤ËÉåÊôØ
  background: #f8fafb;
}

.welcome-banner {
  text-align: center;
  padding: 60px 30px;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 24px;
  margin-bottom: 32px;
  
  h1 {
    font-size: 3.2rem;
    margin-bottom: 16px;
    font-weight: 800;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  p {
    font-size: 1.4rem;
    opacity: 0.95;
    max-width: 600px;
    margin: 0 auto;
    font-weight: 500;
    letter-spacing: 0.5px;
  }
}

// üîß Êñ∞Â¢ûÔºöÊêúÁ¥¢Ê°ÜÂå∫ÂüüÊ†∑Âºè
.search-section {
  margin-bottom: 32px;
  display: flex;
  justify-content: center;
  
  .search-input {
    max-width: 600px;
    width: 100%;
    
    :deep(.el-input__wrapper) {
      border-radius: 16px;
      padding: 12px 16px;
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.08);
      border: 2px solid transparent;
      transition: all 0.3s ease;
      
      &:hover {
        box-shadow: 0 6px 20px rgba(0, 0, 0, 0.12);
      }
      
      &.is-focus {
        border-color: #409EFF;
        box-shadow: 0 6px 24px rgba(64, 158, 255, 0.2);
      }
    }
    
    :deep(.el-input__inner) {
      font-size: 16px;
      font-weight: 500;
      
      &::placeholder {
        color: #909399;
        font-weight: 400;
      }
    }
    
    :deep(.el-input__prefix) {
      color: #409EFF;
    }
    
    :deep(.el-input-group__append) {
      background: #409EFF;
      border: none;
      border-radius: 0 14px 14px 0;
      
      .el-button {
        background: transparent;
        border: none;
        color: white;
        font-weight: 600;
        
        &:hover {
          background: rgba(255, 255, 255, 0.1);
        }
        
        &:disabled {
          background: transparent;
          color: rgba(255, 255, 255, 0.6);
        }
        
        .el-icon {
          margin-right: 6px;
        }
      }
    }
  }
}

.content-tabs {
  background: rgba(255, 255, 255, 0.97);
  backdrop-filter: blur(12px);
  border-radius: 24px;
  padding: 36px;
  box-shadow: 0 12px 48px rgba(0, 0, 0, 0.06);
  min-height: 800px;
  border: 1px solid rgba(255, 255, 255, 0.6);
}

.search-results-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0 0 24px 0;
  border-bottom: 2px solid #e5e7eb;
  margin-bottom: 24px;
  
  h3 {
    margin: 0;
    color: #303133;
    font-size: 20px;
    font-weight: 600;
  }
  
  .clear-search-btn {
    color: #909399;
    transition: all 0.3s ease;
    
    &:hover {
      color: #f56c6c;
      transform: scale(1.05);
    }
  }
}

:deep(.el-tabs__content) {
  padding-top: 24px;
  background: transparent;
}

:deep(.el-tabs__header) {
  margin-bottom: 0;
}

:deep(.el-tabs__nav-wrap::after) {
  background-color: rgba(229, 231, 235, 0.8);
}

:deep(.el-tabs__item) {
  font-size: 16px;
  font-weight: 600;
  padding: 0 24px;
  height: 48px;
  line-height: 48px;
}

// ÂìçÂ∫îÂºèËÆæËÆ°
@media (max-width: 768px) {
  .home-page {
    padding: 20px;
    background: #f8fafb;
  }
  
  .welcome-banner {
    padding: 48px 24px;
    margin-bottom: 24px;
    border-radius: 20px;
    
    h1 {
      font-size: 2.6rem;
    }
    
    p {
      font-size: 1.2rem;
    }
  }
  
  .search-section {
    margin-bottom: 24px;
    padding: 0 4px;
    
    .search-input {
      :deep(.el-input__wrapper) {
        padding: 10px 14px;
      }
      
      :deep(.el-input__inner) {
        font-size: 15px;
      }
      
      :deep(.el-input-group__append .el-button) {
        font-size: 14px;
        
        .el-icon {
          margin-right: 4px;
        }
      }
    }
  }
  
  .content-tabs {
    padding: 24px;
    border-radius: 20px;
  }
  
  .search-results-header {
    flex-direction: column;
    gap: 12px;
    align-items: flex-start;
    padding-bottom: 16px;
    
    h3 {
      font-size: 18px;
    }
  }
  
  :deep(.el-tabs__item) {
    font-size: 14px;
    padding: 0 16px;
    height: 44px;
    line-height: 44px;
  }
}

@media (max-width: 480px) {
  .home-page {
    padding: 16px;
  }
  
  .welcome-banner {
    padding: 36px 20px;
    
    h1 {
      font-size: 2.2rem;
    }
    
    p {
      font-size: 1.1rem;
    }
  }
  
  .search-section .search-input {
    :deep(.el-input-group__append .el-button) {
      .el-icon {
        margin-right: 0;
      }
      
      span:not(.el-icon) {
        display: none; // Âú®Ë∂ÖÂ∞èÂ±èÂπïÈöêËóè"Search"ÊñáÂ≠óÔºåÂè™ÊòæÁ§∫ÂõæÊ†á
      }
    }
  }
}
</style>
